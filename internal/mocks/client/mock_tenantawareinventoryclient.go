// Code generated by mockery v2.53.0. DO NOT EDIT.

package client

import (
	cache "github.com/open-edge-platform/infra-core/inventory/v2/pkg/client/cache"

	computev1 "github.com/open-edge-platform/infra-core/inventory/v2/pkg/api/compute/v1"

	context "context"

	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	inventoryv1 "github.com/open-edge-platform/infra-core/inventory/v2/pkg/api/inventory/v1"

	mock "github.com/stretchr/testify/mock"
)

// MockTenantAwareInventoryClient is an autogenerated mock type for the TenantAwareInventoryClient type
type MockTenantAwareInventoryClient struct {
	mock.Mock
}

type MockTenantAwareInventoryClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTenantAwareInventoryClient) EXPECT() *MockTenantAwareInventoryClient_Expecter {
	return &MockTenantAwareInventoryClient_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockTenantAwareInventoryClient) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTenantAwareInventoryClient_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockTenantAwareInventoryClient_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockTenantAwareInventoryClient_Expecter) Close() *MockTenantAwareInventoryClient_Close_Call {
	return &MockTenantAwareInventoryClient_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockTenantAwareInventoryClient_Close_Call) Run(run func()) *MockTenantAwareInventoryClient_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTenantAwareInventoryClient_Close_Call) Return(_a0 error) *MockTenantAwareInventoryClient_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTenantAwareInventoryClient_Close_Call) RunAndReturn(run func() error) *MockTenantAwareInventoryClient_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, tenantID, res
func (_m *MockTenantAwareInventoryClient) Create(ctx context.Context, tenantID string, res *inventoryv1.Resource) (*inventoryv1.Resource, error) {
	ret := _m.Called(ctx, tenantID, res)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *inventoryv1.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *inventoryv1.Resource) (*inventoryv1.Resource, error)); ok {
		return rf(ctx, tenantID, res)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *inventoryv1.Resource) *inventoryv1.Resource); ok {
		r0 = rf(ctx, tenantID, res)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inventoryv1.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *inventoryv1.Resource) error); ok {
		r1 = rf(ctx, tenantID, res)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAwareInventoryClient_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockTenantAwareInventoryClient_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - tenantID string
//   - res *inventoryv1.Resource
func (_e *MockTenantAwareInventoryClient_Expecter) Create(ctx interface{}, tenantID interface{}, res interface{}) *MockTenantAwareInventoryClient_Create_Call {
	return &MockTenantAwareInventoryClient_Create_Call{Call: _e.mock.On("Create", ctx, tenantID, res)}
}

func (_c *MockTenantAwareInventoryClient_Create_Call) Run(run func(ctx context.Context, tenantID string, res *inventoryv1.Resource)) *MockTenantAwareInventoryClient_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*inventoryv1.Resource))
	})
	return _c
}

func (_c *MockTenantAwareInventoryClient_Create_Call) Return(_a0 *inventoryv1.Resource, _a1 error) *MockTenantAwareInventoryClient_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTenantAwareInventoryClient_Create_Call) RunAndReturn(run func(context.Context, string, *inventoryv1.Resource) (*inventoryv1.Resource, error)) *MockTenantAwareInventoryClient_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, tenantID, id
func (_m *MockTenantAwareInventoryClient) Delete(ctx context.Context, tenantID string, id string) (*inventoryv1.DeleteResourceResponse, error) {
	ret := _m.Called(ctx, tenantID, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *inventoryv1.DeleteResourceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*inventoryv1.DeleteResourceResponse, error)); ok {
		return rf(ctx, tenantID, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *inventoryv1.DeleteResourceResponse); ok {
		r0 = rf(ctx, tenantID, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inventoryv1.DeleteResourceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, tenantID, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAwareInventoryClient_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockTenantAwareInventoryClient_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - tenantID string
//   - id string
func (_e *MockTenantAwareInventoryClient_Expecter) Delete(ctx interface{}, tenantID interface{}, id interface{}) *MockTenantAwareInventoryClient_Delete_Call {
	return &MockTenantAwareInventoryClient_Delete_Call{Call: _e.mock.On("Delete", ctx, tenantID, id)}
}

func (_c *MockTenantAwareInventoryClient_Delete_Call) Run(run func(ctx context.Context, tenantID string, id string)) *MockTenantAwareInventoryClient_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockTenantAwareInventoryClient_Delete_Call) Return(_a0 *inventoryv1.DeleteResourceResponse, _a1 error) *MockTenantAwareInventoryClient_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTenantAwareInventoryClient_Delete_Call) RunAndReturn(run func(context.Context, string, string) (*inventoryv1.DeleteResourceResponse, error)) *MockTenantAwareInventoryClient_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAllResources provides a mock function with given fields: ctx, tenantID, kind, enforce
func (_m *MockTenantAwareInventoryClient) DeleteAllResources(ctx context.Context, tenantID string, kind inventoryv1.ResourceKind, enforce bool) error {
	ret := _m.Called(ctx, tenantID, kind, enforce)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllResources")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, inventoryv1.ResourceKind, bool) error); ok {
		r0 = rf(ctx, tenantID, kind, enforce)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTenantAwareInventoryClient_DeleteAllResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAllResources'
type MockTenantAwareInventoryClient_DeleteAllResources_Call struct {
	*mock.Call
}

// DeleteAllResources is a helper method to define mock.On call
//   - ctx context.Context
//   - tenantID string
//   - kind inventoryv1.ResourceKind
//   - enforce bool
func (_e *MockTenantAwareInventoryClient_Expecter) DeleteAllResources(ctx interface{}, tenantID interface{}, kind interface{}, enforce interface{}) *MockTenantAwareInventoryClient_DeleteAllResources_Call {
	return &MockTenantAwareInventoryClient_DeleteAllResources_Call{Call: _e.mock.On("DeleteAllResources", ctx, tenantID, kind, enforce)}
}

func (_c *MockTenantAwareInventoryClient_DeleteAllResources_Call) Run(run func(ctx context.Context, tenantID string, kind inventoryv1.ResourceKind, enforce bool)) *MockTenantAwareInventoryClient_DeleteAllResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(inventoryv1.ResourceKind), args[3].(bool))
	})
	return _c
}

func (_c *MockTenantAwareInventoryClient_DeleteAllResources_Call) Return(_a0 error) *MockTenantAwareInventoryClient_DeleteAllResources_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTenantAwareInventoryClient_DeleteAllResources_Call) RunAndReturn(run func(context.Context, string, inventoryv1.ResourceKind, bool) error) *MockTenantAwareInventoryClient_DeleteAllResources_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function with given fields: _a0, _a1
func (_m *MockTenantAwareInventoryClient) Find(_a0 context.Context, _a1 *inventoryv1.ResourceFilter) (*inventoryv1.FindResourcesResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *inventoryv1.FindResourcesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *inventoryv1.ResourceFilter) (*inventoryv1.FindResourcesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *inventoryv1.ResourceFilter) *inventoryv1.FindResourcesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inventoryv1.FindResourcesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *inventoryv1.ResourceFilter) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAwareInventoryClient_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockTenantAwareInventoryClient_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *inventoryv1.ResourceFilter
func (_e *MockTenantAwareInventoryClient_Expecter) Find(_a0 interface{}, _a1 interface{}) *MockTenantAwareInventoryClient_Find_Call {
	return &MockTenantAwareInventoryClient_Find_Call{Call: _e.mock.On("Find", _a0, _a1)}
}

func (_c *MockTenantAwareInventoryClient_Find_Call) Run(run func(_a0 context.Context, _a1 *inventoryv1.ResourceFilter)) *MockTenantAwareInventoryClient_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*inventoryv1.ResourceFilter))
	})
	return _c
}

func (_c *MockTenantAwareInventoryClient_Find_Call) Return(_a0 *inventoryv1.FindResourcesResponse, _a1 error) *MockTenantAwareInventoryClient_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTenantAwareInventoryClient_Find_Call) RunAndReturn(run func(context.Context, *inventoryv1.ResourceFilter) (*inventoryv1.FindResourcesResponse, error)) *MockTenantAwareInventoryClient_Find_Call {
	_c.Call.Return(run)
	return _c
}

// FindAll provides a mock function with given fields: _a0, _a1
func (_m *MockTenantAwareInventoryClient) FindAll(_a0 context.Context, _a1 *inventoryv1.ResourceFilter) ([]*inventoryv1.FindResourcesResponse_ResourceTenantIDCarrier, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []*inventoryv1.FindResourcesResponse_ResourceTenantIDCarrier
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *inventoryv1.ResourceFilter) ([]*inventoryv1.FindResourcesResponse_ResourceTenantIDCarrier, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *inventoryv1.ResourceFilter) []*inventoryv1.FindResourcesResponse_ResourceTenantIDCarrier); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*inventoryv1.FindResourcesResponse_ResourceTenantIDCarrier)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *inventoryv1.ResourceFilter) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAwareInventoryClient_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type MockTenantAwareInventoryClient_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *inventoryv1.ResourceFilter
func (_e *MockTenantAwareInventoryClient_Expecter) FindAll(_a0 interface{}, _a1 interface{}) *MockTenantAwareInventoryClient_FindAll_Call {
	return &MockTenantAwareInventoryClient_FindAll_Call{Call: _e.mock.On("FindAll", _a0, _a1)}
}

func (_c *MockTenantAwareInventoryClient_FindAll_Call) Run(run func(_a0 context.Context, _a1 *inventoryv1.ResourceFilter)) *MockTenantAwareInventoryClient_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*inventoryv1.ResourceFilter))
	})
	return _c
}

func (_c *MockTenantAwareInventoryClient_FindAll_Call) Return(_a0 []*inventoryv1.FindResourcesResponse_ResourceTenantIDCarrier, _a1 error) *MockTenantAwareInventoryClient_FindAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTenantAwareInventoryClient_FindAll_Call) RunAndReturn(run func(context.Context, *inventoryv1.ResourceFilter) ([]*inventoryv1.FindResourcesResponse_ResourceTenantIDCarrier, error)) *MockTenantAwareInventoryClient_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, tenantID, id
func (_m *MockTenantAwareInventoryClient) Get(ctx context.Context, tenantID string, id string) (*inventoryv1.GetResourceResponse, error) {
	ret := _m.Called(ctx, tenantID, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *inventoryv1.GetResourceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*inventoryv1.GetResourceResponse, error)); ok {
		return rf(ctx, tenantID, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *inventoryv1.GetResourceResponse); ok {
		r0 = rf(ctx, tenantID, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inventoryv1.GetResourceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, tenantID, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAwareInventoryClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockTenantAwareInventoryClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - tenantID string
//   - id string
func (_e *MockTenantAwareInventoryClient_Expecter) Get(ctx interface{}, tenantID interface{}, id interface{}) *MockTenantAwareInventoryClient_Get_Call {
	return &MockTenantAwareInventoryClient_Get_Call{Call: _e.mock.On("Get", ctx, tenantID, id)}
}

func (_c *MockTenantAwareInventoryClient_Get_Call) Run(run func(ctx context.Context, tenantID string, id string)) *MockTenantAwareInventoryClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockTenantAwareInventoryClient_Get_Call) Return(_a0 *inventoryv1.GetResourceResponse, _a1 error) *MockTenantAwareInventoryClient_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTenantAwareInventoryClient_Get_Call) RunAndReturn(run func(context.Context, string, string) (*inventoryv1.GetResourceResponse, error)) *MockTenantAwareInventoryClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetHostByUUID provides a mock function with given fields: ctx, tenantID, uuid
func (_m *MockTenantAwareInventoryClient) GetHostByUUID(ctx context.Context, tenantID string, uuid string) (*computev1.HostResource, error) {
	ret := _m.Called(ctx, tenantID, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetHostByUUID")
	}

	var r0 *computev1.HostResource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*computev1.HostResource, error)); ok {
		return rf(ctx, tenantID, uuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *computev1.HostResource); ok {
		r0 = rf(ctx, tenantID, uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*computev1.HostResource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, tenantID, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAwareInventoryClient_GetHostByUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHostByUUID'
type MockTenantAwareInventoryClient_GetHostByUUID_Call struct {
	*mock.Call
}

// GetHostByUUID is a helper method to define mock.On call
//   - ctx context.Context
//   - tenantID string
//   - uuid string
func (_e *MockTenantAwareInventoryClient_Expecter) GetHostByUUID(ctx interface{}, tenantID interface{}, uuid interface{}) *MockTenantAwareInventoryClient_GetHostByUUID_Call {
	return &MockTenantAwareInventoryClient_GetHostByUUID_Call{Call: _e.mock.On("GetHostByUUID", ctx, tenantID, uuid)}
}

func (_c *MockTenantAwareInventoryClient_GetHostByUUID_Call) Run(run func(ctx context.Context, tenantID string, uuid string)) *MockTenantAwareInventoryClient_GetHostByUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockTenantAwareInventoryClient_GetHostByUUID_Call) Return(_a0 *computev1.HostResource, _a1 error) *MockTenantAwareInventoryClient_GetHostByUUID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTenantAwareInventoryClient_GetHostByUUID_Call) RunAndReturn(run func(context.Context, string, string) (*computev1.HostResource, error)) *MockTenantAwareInventoryClient_GetHostByUUID_Call {
	_c.Call.Return(run)
	return _c
}

// GetSitesPerRegion provides a mock function with given fields: _a0, _a1
func (_m *MockTenantAwareInventoryClient) GetSitesPerRegion(_a0 context.Context, _a1 *inventoryv1.GetSitesPerRegionRequest) (*inventoryv1.GetSitesPerRegionResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetSitesPerRegion")
	}

	var r0 *inventoryv1.GetSitesPerRegionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *inventoryv1.GetSitesPerRegionRequest) (*inventoryv1.GetSitesPerRegionResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *inventoryv1.GetSitesPerRegionRequest) *inventoryv1.GetSitesPerRegionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inventoryv1.GetSitesPerRegionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *inventoryv1.GetSitesPerRegionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAwareInventoryClient_GetSitesPerRegion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSitesPerRegion'
type MockTenantAwareInventoryClient_GetSitesPerRegion_Call struct {
	*mock.Call
}

// GetSitesPerRegion is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *inventoryv1.GetSitesPerRegionRequest
func (_e *MockTenantAwareInventoryClient_Expecter) GetSitesPerRegion(_a0 interface{}, _a1 interface{}) *MockTenantAwareInventoryClient_GetSitesPerRegion_Call {
	return &MockTenantAwareInventoryClient_GetSitesPerRegion_Call{Call: _e.mock.On("GetSitesPerRegion", _a0, _a1)}
}

func (_c *MockTenantAwareInventoryClient_GetSitesPerRegion_Call) Run(run func(_a0 context.Context, _a1 *inventoryv1.GetSitesPerRegionRequest)) *MockTenantAwareInventoryClient_GetSitesPerRegion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*inventoryv1.GetSitesPerRegionRequest))
	})
	return _c
}

func (_c *MockTenantAwareInventoryClient_GetSitesPerRegion_Call) Return(_a0 *inventoryv1.GetSitesPerRegionResponse, _a1 error) *MockTenantAwareInventoryClient_GetSitesPerRegion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTenantAwareInventoryClient_GetSitesPerRegion_Call) RunAndReturn(run func(context.Context, *inventoryv1.GetSitesPerRegionRequest) (*inventoryv1.GetSitesPerRegionResponse, error)) *MockTenantAwareInventoryClient_GetSitesPerRegion_Call {
	_c.Call.Return(run)
	return _c
}

// GetTreeHierarchy provides a mock function with given fields: _a0, _a1
func (_m *MockTenantAwareInventoryClient) GetTreeHierarchy(_a0 context.Context, _a1 *inventoryv1.GetTreeHierarchyRequest) ([]*inventoryv1.GetTreeHierarchyResponse_TreeNode, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTreeHierarchy")
	}

	var r0 []*inventoryv1.GetTreeHierarchyResponse_TreeNode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *inventoryv1.GetTreeHierarchyRequest) ([]*inventoryv1.GetTreeHierarchyResponse_TreeNode, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *inventoryv1.GetTreeHierarchyRequest) []*inventoryv1.GetTreeHierarchyResponse_TreeNode); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*inventoryv1.GetTreeHierarchyResponse_TreeNode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *inventoryv1.GetTreeHierarchyRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAwareInventoryClient_GetTreeHierarchy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTreeHierarchy'
type MockTenantAwareInventoryClient_GetTreeHierarchy_Call struct {
	*mock.Call
}

// GetTreeHierarchy is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *inventoryv1.GetTreeHierarchyRequest
func (_e *MockTenantAwareInventoryClient_Expecter) GetTreeHierarchy(_a0 interface{}, _a1 interface{}) *MockTenantAwareInventoryClient_GetTreeHierarchy_Call {
	return &MockTenantAwareInventoryClient_GetTreeHierarchy_Call{Call: _e.mock.On("GetTreeHierarchy", _a0, _a1)}
}

func (_c *MockTenantAwareInventoryClient_GetTreeHierarchy_Call) Run(run func(_a0 context.Context, _a1 *inventoryv1.GetTreeHierarchyRequest)) *MockTenantAwareInventoryClient_GetTreeHierarchy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*inventoryv1.GetTreeHierarchyRequest))
	})
	return _c
}

func (_c *MockTenantAwareInventoryClient_GetTreeHierarchy_Call) Return(_a0 []*inventoryv1.GetTreeHierarchyResponse_TreeNode, _a1 error) *MockTenantAwareInventoryClient_GetTreeHierarchy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTenantAwareInventoryClient_GetTreeHierarchy_Call) RunAndReturn(run func(context.Context, *inventoryv1.GetTreeHierarchyRequest) ([]*inventoryv1.GetTreeHierarchyResponse_TreeNode, error)) *MockTenantAwareInventoryClient_GetTreeHierarchy_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: _a0, _a1
func (_m *MockTenantAwareInventoryClient) List(_a0 context.Context, _a1 *inventoryv1.ResourceFilter) (*inventoryv1.ListResourcesResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *inventoryv1.ListResourcesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *inventoryv1.ResourceFilter) (*inventoryv1.ListResourcesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *inventoryv1.ResourceFilter) *inventoryv1.ListResourcesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inventoryv1.ListResourcesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *inventoryv1.ResourceFilter) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAwareInventoryClient_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockTenantAwareInventoryClient_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *inventoryv1.ResourceFilter
func (_e *MockTenantAwareInventoryClient_Expecter) List(_a0 interface{}, _a1 interface{}) *MockTenantAwareInventoryClient_List_Call {
	return &MockTenantAwareInventoryClient_List_Call{Call: _e.mock.On("List", _a0, _a1)}
}

func (_c *MockTenantAwareInventoryClient_List_Call) Run(run func(_a0 context.Context, _a1 *inventoryv1.ResourceFilter)) *MockTenantAwareInventoryClient_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*inventoryv1.ResourceFilter))
	})
	return _c
}

func (_c *MockTenantAwareInventoryClient_List_Call) Return(_a0 *inventoryv1.ListResourcesResponse, _a1 error) *MockTenantAwareInventoryClient_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTenantAwareInventoryClient_List_Call) RunAndReturn(run func(context.Context, *inventoryv1.ResourceFilter) (*inventoryv1.ListResourcesResponse, error)) *MockTenantAwareInventoryClient_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: _a0, _a1
func (_m *MockTenantAwareInventoryClient) ListAll(_a0 context.Context, _a1 *inventoryv1.ResourceFilter) ([]*inventoryv1.Resource, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []*inventoryv1.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *inventoryv1.ResourceFilter) ([]*inventoryv1.Resource, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *inventoryv1.ResourceFilter) []*inventoryv1.Resource); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*inventoryv1.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *inventoryv1.ResourceFilter) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAwareInventoryClient_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockTenantAwareInventoryClient_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *inventoryv1.ResourceFilter
func (_e *MockTenantAwareInventoryClient_Expecter) ListAll(_a0 interface{}, _a1 interface{}) *MockTenantAwareInventoryClient_ListAll_Call {
	return &MockTenantAwareInventoryClient_ListAll_Call{Call: _e.mock.On("ListAll", _a0, _a1)}
}

func (_c *MockTenantAwareInventoryClient_ListAll_Call) Run(run func(_a0 context.Context, _a1 *inventoryv1.ResourceFilter)) *MockTenantAwareInventoryClient_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*inventoryv1.ResourceFilter))
	})
	return _c
}

func (_c *MockTenantAwareInventoryClient_ListAll_Call) Return(_a0 []*inventoryv1.Resource, _a1 error) *MockTenantAwareInventoryClient_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTenantAwareInventoryClient_ListAll_Call) RunAndReturn(run func(context.Context, *inventoryv1.ResourceFilter) ([]*inventoryv1.Resource, error)) *MockTenantAwareInventoryClient_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// ListInheritedTelemetryProfiles provides a mock function with given fields: ctx, tenantID, inheritBy, filter, orderBy, limit, offset
func (_m *MockTenantAwareInventoryClient) ListInheritedTelemetryProfiles(ctx context.Context, tenantID string, inheritBy *inventoryv1.ListInheritedTelemetryProfilesRequest_InheritBy, filter string, orderBy string, limit uint32, offset uint32) (*inventoryv1.ListInheritedTelemetryProfilesResponse, error) {
	ret := _m.Called(ctx, tenantID, inheritBy, filter, orderBy, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for ListInheritedTelemetryProfiles")
	}

	var r0 *inventoryv1.ListInheritedTelemetryProfilesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *inventoryv1.ListInheritedTelemetryProfilesRequest_InheritBy, string, string, uint32, uint32) (*inventoryv1.ListInheritedTelemetryProfilesResponse, error)); ok {
		return rf(ctx, tenantID, inheritBy, filter, orderBy, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *inventoryv1.ListInheritedTelemetryProfilesRequest_InheritBy, string, string, uint32, uint32) *inventoryv1.ListInheritedTelemetryProfilesResponse); ok {
		r0 = rf(ctx, tenantID, inheritBy, filter, orderBy, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inventoryv1.ListInheritedTelemetryProfilesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *inventoryv1.ListInheritedTelemetryProfilesRequest_InheritBy, string, string, uint32, uint32) error); ok {
		r1 = rf(ctx, tenantID, inheritBy, filter, orderBy, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAwareInventoryClient_ListInheritedTelemetryProfiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInheritedTelemetryProfiles'
type MockTenantAwareInventoryClient_ListInheritedTelemetryProfiles_Call struct {
	*mock.Call
}

// ListInheritedTelemetryProfiles is a helper method to define mock.On call
//   - ctx context.Context
//   - tenantID string
//   - inheritBy *inventoryv1.ListInheritedTelemetryProfilesRequest_InheritBy
//   - filter string
//   - orderBy string
//   - limit uint32
//   - offset uint32
func (_e *MockTenantAwareInventoryClient_Expecter) ListInheritedTelemetryProfiles(ctx interface{}, tenantID interface{}, inheritBy interface{}, filter interface{}, orderBy interface{}, limit interface{}, offset interface{}) *MockTenantAwareInventoryClient_ListInheritedTelemetryProfiles_Call {
	return &MockTenantAwareInventoryClient_ListInheritedTelemetryProfiles_Call{Call: _e.mock.On("ListInheritedTelemetryProfiles", ctx, tenantID, inheritBy, filter, orderBy, limit, offset)}
}

func (_c *MockTenantAwareInventoryClient_ListInheritedTelemetryProfiles_Call) Run(run func(ctx context.Context, tenantID string, inheritBy *inventoryv1.ListInheritedTelemetryProfilesRequest_InheritBy, filter string, orderBy string, limit uint32, offset uint32)) *MockTenantAwareInventoryClient_ListInheritedTelemetryProfiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*inventoryv1.ListInheritedTelemetryProfilesRequest_InheritBy), args[3].(string), args[4].(string), args[5].(uint32), args[6].(uint32))
	})
	return _c
}

func (_c *MockTenantAwareInventoryClient_ListInheritedTelemetryProfiles_Call) Return(_a0 *inventoryv1.ListInheritedTelemetryProfilesResponse, _a1 error) *MockTenantAwareInventoryClient_ListInheritedTelemetryProfiles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTenantAwareInventoryClient_ListInheritedTelemetryProfiles_Call) RunAndReturn(run func(context.Context, string, *inventoryv1.ListInheritedTelemetryProfilesRequest_InheritBy, string, string, uint32, uint32) (*inventoryv1.ListInheritedTelemetryProfilesResponse, error)) *MockTenantAwareInventoryClient_ListInheritedTelemetryProfiles_Call {
	_c.Call.Return(run)
	return _c
}

// TestGetClientCache provides a mock function with no fields
func (_m *MockTenantAwareInventoryClient) TestGetClientCache() *cache.InventoryCache {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TestGetClientCache")
	}

	var r0 *cache.InventoryCache
	if rf, ok := ret.Get(0).(func() *cache.InventoryCache); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cache.InventoryCache)
		}
	}

	return r0
}

// MockTenantAwareInventoryClient_TestGetClientCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TestGetClientCache'
type MockTenantAwareInventoryClient_TestGetClientCache_Call struct {
	*mock.Call
}

// TestGetClientCache is a helper method to define mock.On call
func (_e *MockTenantAwareInventoryClient_Expecter) TestGetClientCache() *MockTenantAwareInventoryClient_TestGetClientCache_Call {
	return &MockTenantAwareInventoryClient_TestGetClientCache_Call{Call: _e.mock.On("TestGetClientCache")}
}

func (_c *MockTenantAwareInventoryClient_TestGetClientCache_Call) Run(run func()) *MockTenantAwareInventoryClient_TestGetClientCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTenantAwareInventoryClient_TestGetClientCache_Call) Return(_a0 *cache.InventoryCache) *MockTenantAwareInventoryClient_TestGetClientCache_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTenantAwareInventoryClient_TestGetClientCache_Call) RunAndReturn(run func() *cache.InventoryCache) *MockTenantAwareInventoryClient_TestGetClientCache_Call {
	_c.Call.Return(run)
	return _c
}

// TestGetClientCacheUUID provides a mock function with no fields
func (_m *MockTenantAwareInventoryClient) TestGetClientCacheUUID() *cache.InventoryCache {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TestGetClientCacheUUID")
	}

	var r0 *cache.InventoryCache
	if rf, ok := ret.Get(0).(func() *cache.InventoryCache); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cache.InventoryCache)
		}
	}

	return r0
}

// MockTenantAwareInventoryClient_TestGetClientCacheUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TestGetClientCacheUUID'
type MockTenantAwareInventoryClient_TestGetClientCacheUUID_Call struct {
	*mock.Call
}

// TestGetClientCacheUUID is a helper method to define mock.On call
func (_e *MockTenantAwareInventoryClient_Expecter) TestGetClientCacheUUID() *MockTenantAwareInventoryClient_TestGetClientCacheUUID_Call {
	return &MockTenantAwareInventoryClient_TestGetClientCacheUUID_Call{Call: _e.mock.On("TestGetClientCacheUUID")}
}

func (_c *MockTenantAwareInventoryClient_TestGetClientCacheUUID_Call) Run(run func()) *MockTenantAwareInventoryClient_TestGetClientCacheUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTenantAwareInventoryClient_TestGetClientCacheUUID_Call) Return(_a0 *cache.InventoryCache) *MockTenantAwareInventoryClient_TestGetClientCacheUUID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTenantAwareInventoryClient_TestGetClientCacheUUID_Call) RunAndReturn(run func() *cache.InventoryCache) *MockTenantAwareInventoryClient_TestGetClientCacheUUID_Call {
	_c.Call.Return(run)
	return _c
}

// TestingOnlySetClient provides a mock function with given fields: _a0
func (_m *MockTenantAwareInventoryClient) TestingOnlySetClient(_a0 inventoryv1.InventoryServiceClient) {
	_m.Called(_a0)
}

// MockTenantAwareInventoryClient_TestingOnlySetClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TestingOnlySetClient'
type MockTenantAwareInventoryClient_TestingOnlySetClient_Call struct {
	*mock.Call
}

// TestingOnlySetClient is a helper method to define mock.On call
//   - _a0 inventoryv1.InventoryServiceClient
func (_e *MockTenantAwareInventoryClient_Expecter) TestingOnlySetClient(_a0 interface{}) *MockTenantAwareInventoryClient_TestingOnlySetClient_Call {
	return &MockTenantAwareInventoryClient_TestingOnlySetClient_Call{Call: _e.mock.On("TestingOnlySetClient", _a0)}
}

func (_c *MockTenantAwareInventoryClient_TestingOnlySetClient_Call) Run(run func(_a0 inventoryv1.InventoryServiceClient)) *MockTenantAwareInventoryClient_TestingOnlySetClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(inventoryv1.InventoryServiceClient))
	})
	return _c
}

func (_c *MockTenantAwareInventoryClient_TestingOnlySetClient_Call) Return() *MockTenantAwareInventoryClient_TestingOnlySetClient_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTenantAwareInventoryClient_TestingOnlySetClient_Call) RunAndReturn(run func(inventoryv1.InventoryServiceClient)) *MockTenantAwareInventoryClient_TestingOnlySetClient_Call {
	_c.Run(run)
	return _c
}

// Update provides a mock function with given fields: ctx, tenantID, id, fm, res
func (_m *MockTenantAwareInventoryClient) Update(ctx context.Context, tenantID string, id string, fm *fieldmaskpb.FieldMask, res *inventoryv1.Resource) (*inventoryv1.Resource, error) {
	ret := _m.Called(ctx, tenantID, id, fm, res)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *inventoryv1.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *fieldmaskpb.FieldMask, *inventoryv1.Resource) (*inventoryv1.Resource, error)); ok {
		return rf(ctx, tenantID, id, fm, res)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *fieldmaskpb.FieldMask, *inventoryv1.Resource) *inventoryv1.Resource); ok {
		r0 = rf(ctx, tenantID, id, fm, res)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inventoryv1.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *fieldmaskpb.FieldMask, *inventoryv1.Resource) error); ok {
		r1 = rf(ctx, tenantID, id, fm, res)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAwareInventoryClient_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockTenantAwareInventoryClient_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - tenantID string
//   - id string
//   - fm *fieldmaskpb.FieldMask
//   - res *inventoryv1.Resource
func (_e *MockTenantAwareInventoryClient_Expecter) Update(ctx interface{}, tenantID interface{}, id interface{}, fm interface{}, res interface{}) *MockTenantAwareInventoryClient_Update_Call {
	return &MockTenantAwareInventoryClient_Update_Call{Call: _e.mock.On("Update", ctx, tenantID, id, fm, res)}
}

func (_c *MockTenantAwareInventoryClient_Update_Call) Run(run func(ctx context.Context, tenantID string, id string, fm *fieldmaskpb.FieldMask, res *inventoryv1.Resource)) *MockTenantAwareInventoryClient_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*fieldmaskpb.FieldMask), args[4].(*inventoryv1.Resource))
	})
	return _c
}

func (_c *MockTenantAwareInventoryClient_Update_Call) Return(_a0 *inventoryv1.Resource, _a1 error) *MockTenantAwareInventoryClient_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTenantAwareInventoryClient_Update_Call) RunAndReturn(run func(context.Context, string, string, *fieldmaskpb.FieldMask, *inventoryv1.Resource) (*inventoryv1.Resource, error)) *MockTenantAwareInventoryClient_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSubscriptions provides a mock function with given fields: ctx, tenantID, kinds
func (_m *MockTenantAwareInventoryClient) UpdateSubscriptions(ctx context.Context, tenantID string, kinds []inventoryv1.ResourceKind) error {
	ret := _m.Called(ctx, tenantID, kinds)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSubscriptions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []inventoryv1.ResourceKind) error); ok {
		r0 = rf(ctx, tenantID, kinds)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTenantAwareInventoryClient_UpdateSubscriptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSubscriptions'
type MockTenantAwareInventoryClient_UpdateSubscriptions_Call struct {
	*mock.Call
}

// UpdateSubscriptions is a helper method to define mock.On call
//   - ctx context.Context
//   - tenantID string
//   - kinds []inventoryv1.ResourceKind
func (_e *MockTenantAwareInventoryClient_Expecter) UpdateSubscriptions(ctx interface{}, tenantID interface{}, kinds interface{}) *MockTenantAwareInventoryClient_UpdateSubscriptions_Call {
	return &MockTenantAwareInventoryClient_UpdateSubscriptions_Call{Call: _e.mock.On("UpdateSubscriptions", ctx, tenantID, kinds)}
}

func (_c *MockTenantAwareInventoryClient_UpdateSubscriptions_Call) Run(run func(ctx context.Context, tenantID string, kinds []inventoryv1.ResourceKind)) *MockTenantAwareInventoryClient_UpdateSubscriptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]inventoryv1.ResourceKind))
	})
	return _c
}

func (_c *MockTenantAwareInventoryClient_UpdateSubscriptions_Call) Return(_a0 error) *MockTenantAwareInventoryClient_UpdateSubscriptions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTenantAwareInventoryClient_UpdateSubscriptions_Call) RunAndReturn(run func(context.Context, string, []inventoryv1.ResourceKind) error) *MockTenantAwareInventoryClient_UpdateSubscriptions_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTenantAwareInventoryClient creates a new instance of MockTenantAwareInventoryClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTenantAwareInventoryClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTenantAwareInventoryClient {
	mock := &MockTenantAwareInventoryClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
