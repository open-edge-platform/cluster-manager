// Code generated by mockery. DO NOT EDIT.

package k8s

import (
	"context"

	"github.com/stretchr/testify/mock"
	capi "sigs.k8s.io/cluster-api/api/v1beta1"
)

// MockK8sWrapperClient is an autogenerated mock type for the K8sWrapperClient type
type MockK8sWrapperClient struct {
	mock.Mock
}

type MockK8sWrapperClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockK8sWrapperClient) EXPECT() *MockK8sWrapperClient_Expecter {
	return &MockK8sWrapperClient_Expecter{mock: &_m.Mock}
}

// DeleteCluster provides a mock function with given fields: ctx, namespace, clusterName
func (_m *MockK8sWrapperClient) DeleteCluster(ctx context.Context, namespace string, clusterName string) error {
	ret := _m.Called(ctx, namespace, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCluster")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, namespace, clusterName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockK8sWrapperClient_DeleteCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCluster'
type MockK8sWrapperClient_DeleteCluster_Call struct {
	*mock.Call
}

// DeleteCluster is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - clusterName string
func (_e *MockK8sWrapperClient_Expecter) DeleteCluster(ctx interface{}, namespace interface{}, clusterName interface{}) *MockK8sWrapperClient_DeleteCluster_Call {
	return &MockK8sWrapperClient_DeleteCluster_Call{Call: _e.mock.On("DeleteCluster", ctx, namespace, clusterName)}
}

func (_c *MockK8sWrapperClient_DeleteCluster_Call) Run(run func(ctx context.Context, namespace string, clusterName string)) *MockK8sWrapperClient_DeleteCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockK8sWrapperClient_DeleteCluster_Call) Return(_a0 error) *MockK8sWrapperClient_DeleteCluster_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockK8sWrapperClient_DeleteCluster_Call) RunAndReturn(run func(context.Context, string, string) error) *MockK8sWrapperClient_DeleteCluster_Call {
	_c.Call.Return(run)
	return _c
}

// GetMachineByHostID provides a mock function with given fields: ctx, namespace, hostID
func (_m *MockK8sWrapperClient) GetMachineByHostID(ctx context.Context, namespace, hostID string) (capi.Machine, error) {
	ret := _m.Called(ctx, namespace, hostID)

	if len(ret) == 0 {
		panic("no return value specified for GetMachineByHostID")
	}

	var r0 capi.Machine
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (capi.Machine, error)); ok {
		return rf(ctx, namespace, hostID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) capi.Machine); ok {
		r0 = rf(ctx, namespace, hostID)
	} else {
		r0 = ret.Get(0).(capi.Machine)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, hostID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockK8sWrapperClient_GetMachineByHostID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMachineByHostID'
type MockK8sWrapperClient_GetMachineByHostID_Call struct {
	*mock.Call
}

// GetMachineByHostID is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - hostID string
func (_e *MockK8sWrapperClient_Expecter) GetMachineByHostID(ctx interface{}, namespace interface{}, hostID interface{}) *MockK8sWrapperClient_GetMachineByHostID_Call {
	return &MockK8sWrapperClient_GetMachineByHostID_Call{Call: _e.mock.On("GetMachineByHostID", ctx, namespace, hostID)}
}

func (_c *MockK8sWrapperClient_GetMachineByHostID_Call) Run(run func(ctx context.Context, namespace string, hostID string)) *MockK8sWrapperClient_GetMachineByHostID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockK8sWrapperClient_GetMachineByHostID_Call) Return(_a0 capi.Machine, _a1 error) *MockK8sWrapperClient_GetMachineByHostID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockK8sWrapperClient_GetMachineByHostID_Call) RunAndReturn(run func(context.Context, string, string) (capi.Machine, error)) *MockK8sWrapperClient_GetMachineByHostID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockK8sWrapperClient creates a new instance of MockK8sWrapperClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockK8sWrapperClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockK8sWrapperClient {
	mock := &MockK8sWrapperClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// SetMachineLabels provides a mock function with given fields: ctx, namespace, machineName, newUserLabels
func (_m *MockK8sWrapperClient) SetMachineLabels(ctx context.Context, namespace string, machineName string, newUserLabels map[string]string) error {
	ret := _m.Called(ctx, namespace, machineName, newUserLabels)

	if len(ret) == 0 {
		panic("no return value specified for SetMachineLabels")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]string) error); ok {
		r0 = rf(ctx, namespace, machineName, newUserLabels)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockK8sWrapperClient_SetMachineLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMachineLabels'
type MockK8sWrapperClient_SetMachineLabels_Call struct {
	*mock.Call
}

// SetMachineLabels is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - machineName string
//   - newUserLabels map[string]string
func (_e *MockK8sWrapperClient_Expecter) SetMachineLabels(ctx interface{}, namespace interface{}, machineName interface{}, newUserLabels interface{}) *MockK8sWrapperClient_SetMachineLabels_Call {
	return &MockK8sWrapperClient_SetMachineLabels_Call{Call: _e.mock.On("SetMachineLabels", ctx, namespace, machineName, newUserLabels)}
}

func (_c *MockK8sWrapperClient_SetMachineLabels_Call) Run(run func(ctx context.Context, namespace string, machineName string, newUserLabels map[string]string)) *MockK8sWrapperClient_SetMachineLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(map[string]string))
	})
	return _c
}

func (_c *MockK8sWrapperClient_SetMachineLabels_Call) Return(_a0 error) *MockK8sWrapperClient_SetMachineLabels_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockK8sWrapperClient_SetMachineLabels_Call) RunAndReturn(run func(context.Context, string, string, map[string]string) error) *MockK8sWrapperClient_SetMachineLabels_Call {
	_c.Call.Return(run)
	return _c
}
