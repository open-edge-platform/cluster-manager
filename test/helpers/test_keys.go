// SPDX-FileCopyrightText: (C) 2025 Intel Corporation
// SPDX-License-Identifier: Apache-2.0
package helpers

import (
	"bytes"
	"crypto/rsa"
	"crypto/x509"
	"encoding/pem"
	"fmt"
	"os"
	"sync"
)

var (
	testPrivateKey     *rsa.PrivateKey
	testPrivateKeyOnce sync.Once
	testPrivateKeyErr  error
	testKeyID          string
	testKeyIDOnce      sync.Once
	testKeyIDErr       error
)

// GetTestKeyID returns the dynamically generated key ID
// The key ID is generated by generate-test-keys.sh and stored in /tmp/cluster-manager-test-keys/test-kid.txt
func GetTestKeyID() (string, error) {
	testKeyIDOnce.Do(func() {
		keyDir := os.Getenv("KEY_DIR")
		if keyDir == "" {
			keyDir = "/tmp/cluster-manager-test-keys"
		}

		kidPath := keyDir + "/test-kid.txt"

		kidData, err := os.ReadFile(kidPath)
		if err != nil {
			testKeyIDErr = fmt.Errorf("failed to read key ID from %s: %w (hint: run test/helpers/generate-test-keys.sh first)", kidPath, err)
			return
		}

		testKeyID = string(kidData)
		testKeyID = string(bytes.TrimSpace([]byte(testKeyID)))
	})

	return testKeyID, testKeyIDErr
}

// GetTestPrivateKey returns the test private key
func GetTestPrivateKey() (*rsa.PrivateKey, error) {
	testPrivateKeyOnce.Do(func() {
		keyDir := os.Getenv("KEY_DIR")
		if keyDir == "" {
			keyDir = "/tmp/cluster-manager-test-keys"
		}

		keyPath := keyDir + "/test-private-key.pem"

		keyData, err := os.ReadFile(keyPath)
		if err != nil {
			testPrivateKeyErr = fmt.Errorf("failed to read private key from %s: %w (hint: run test/helpers/generate-test-keys.sh first)", keyPath, err)
			return
		}

		block, _ := pem.Decode(keyData)
		if block == nil {
			testPrivateKeyErr = fmt.Errorf("failed to parse PEM block containing the private key")
			return
		}

		privateKeyInterface, err := x509.ParsePKCS8PrivateKey(block.Bytes)
		if err != nil {
			// try PKCS1 as fallback
			testPrivateKey, err = x509.ParsePKCS1PrivateKey(block.Bytes)
			if err != nil {
				testPrivateKeyErr = fmt.Errorf("failed to parse private key: %w", err)
				return
			}
		} else {
			var ok bool
			testPrivateKey, ok = privateKeyInterface.(*rsa.PrivateKey)
			if !ok {
				testPrivateKeyErr = fmt.Errorf("private key is not RSA")
				return
			}
		}
	})

	return testPrivateKey, testPrivateKeyErr
}
