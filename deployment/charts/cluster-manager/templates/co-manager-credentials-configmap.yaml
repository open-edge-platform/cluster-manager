{{- if .Values.credentialsM2M.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "cluster-manager.fullname" . }}-credentials-script
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "cluster-manager.labels" . | nindent 4 }}
data:
  credentials-m2m.sh: |
    #!/bin/bash
    set -euo pipefail
    # Helm values
    VAULT_ADDR="http://{{ .Values.credentialsM2M.vault.service }}:{{ .Values.credentialsM2M.vault.port }}"
    KEYCLOAK_URL="http://{{ .Values.credentialsM2M.keycloak.service }}:{{ .Values.credentialsM2M.keycloak.port }}"
    KEYCLOAK_REALM="{{ .Values.credentialsM2M.keycloak.realm }}"
    CLIENT_ID="{{ .Values.credentialsM2M.keycloak.clientId }}"
    SECRET_PATH="{{ .Values.credentialsM2M.vault.secretPath }}"
    RETRY_ATTEMPTS={{ .Values.credentialsM2M.job.retryAttempts }}
    RETRY_DELAY={{ .Values.credentialsM2M.job.retryDelay }}

    # service account token for Vault authn
    SA_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)

    log() {
        echo "[$(date -Iseconds)] $*" >&2
    }

    retry_with_backoff() {
        local attempt=1
        while [ $attempt -le $RETRY_ATTEMPTS ]; do
            if "$@"; then
                return 0
            fi
            log "attempt $attempt failed - retrying in ${RETRY_DELAY}s..."
            sleep $RETRY_DELAY
            ((attempt++))
        done
        log "all attempts failed after $RETRY_ATTEMPTS tries"
        return 1
    }

    authenticate_vault() {
        local auth_response=$(retry_with_backoff curl -s -f \
            --request POST \
            --data "{\"jwt\": \"$SA_TOKEN\", \"role\": \"cluster-manager\"}" \
            "$VAULT_ADDR/v1/{{ .Values.credentialsM2M.vault.authPath }}/login")

        if [ $? -ne 0 ]; then
            log "ERROR: failed to authn with Vault"
            return 1
        fi

        VAULT_TOKEN=$(echo "$auth_response" | jq -r '.auth.client_token')
        if [ "$VAULT_TOKEN" = "null" ] || [ -z "$VAULT_TOKEN" ]; then
            log "ERROR: failed to extract Vault token"
            return 1
        fi

        return 0
    }

    get_keycloak_admin_token() {
        local admin_user="admin"
        local admin_pass=$(cat /etc/keycloak-admin/password)

        local token_response=$(retry_with_backoff curl -s -f \
            --request POST \
            --header "Content-Type: application/x-www-form-urlencoded" \
            --data "grant_type=password&client_id=admin-cli&username=$admin_user&password=$admin_pass" \
            "$KEYCLOAK_URL/realms/master/protocol/openid-connect/token")

        if [ $? -ne 0 ]; then
            log "ERROR: failed to get keycloak admin token"
            return 1
        fi

        KC_ADMIN_TOKEN=$(echo "$token_response" | jq -r '.access_token')
        if [ "$KC_ADMIN_TOKEN" = "null" ] || [ -z "$KC_ADMIN_TOKEN" ]; then
            log "ERROR: failed to extract keycloak admin token"
            return 1
        fi

        return 0
    }

    check_existing_secret() {
        local secret_response=$(curl -s -w "%{http_code}" \
            --header "X-Vault-Token: $VAULT_TOKEN" \
            "$VAULT_ADDR/v1/$SECRET_PATH")

        local http_code="${secret_response: -3}"

        if [ "$http_code" = "200" ]; then
            return 0
        elif [ "$http_code" = "404" ]; then
            log "secret not found, proceeding with extraction"
            return 1
        else
            log "ERROR: response code $http_code when checking vault secret"
            return 1
        fi
    }

    extract_client_credentials() {
        # get client UUID
        local clients_response=$(retry_with_backoff curl -s -f \
            --header "Authorization: Bearer $KC_ADMIN_TOKEN" \
            --header "Content-Type: application/json" \
            "$KEYCLOAK_URL/admin/realms/$KEYCLOAK_REALM/clients?clientId=$CLIENT_ID")

        if [ $? -ne 0 ]; then
            log "ERROR: failed to get client list from keycloak"
            return 1
        fi

        local client_uuid=$(echo "$clients_response" | jq -r ".[0].id")
        if [ "$client_uuid" = "null" ] || [ -z "$client_uuid" ]; then
            log "ERROR: co-manager-m2m-client not found in keycloak"
            return 1
        fi

        # get client secret
        local secret_response=$(retry_with_backoff curl -s -f \
            --header "Authorization: Bearer $KC_ADMIN_TOKEN" \
            --header "Content-Type: application/json" \
            "$KEYCLOAK_URL/admin/realms/$KEYCLOAK_REALM/clients/$client_uuid/client-secret")

        if [ $? -ne 0 ]; then
            log "ERROR: failed to get client secret from keycloak"
            return 1
        fi

        CLIENT_SECRET=$(echo "$secret_response" | jq -r '.value')
        if [ "$CLIENT_SECRET" = "null" ] || [ -z "$CLIENT_SECRET" ]; then
            log "ERROR: failed to extract client secret"
            return 1
        fi

        return 0
    }

    store_credentials_in_vault() {
        local vault_data=$(jq -n \
            --arg client_id "$CLIENT_ID" \
            --arg client_secret "$CLIENT_SECRET" \
            '{data: {client_id: $client_id, client_secret: $client_secret}}')

        local store_response=$(retry_with_backoff curl -s -f \
            --request PUT \
            --header "X-Vault-Token: $VAULT_TOKEN" \
            --header "Content-Type: application/json" \
            --data "$vault_data" \
            "$VAULT_ADDR/v1/$SECRET_PATH")

        if [ $? -ne 0 ]; then
            log "ERROR: failed to store credentials in vault"
            return 1
        fi

        return 0
    }

    main() {
        if ! authenticate_vault; then
            log "FATAL: vault authn failed"
            exit 1
        fi

        if check_existing_secret; then
            log "job completed successfully"
            exit 0
        fi

        if ! get_keycloak_admin_token; then
            log "FATAL: failed to get keycloak admin token"
            exit 1
        fi

        if ! extract_client_credentials; then
            log "FATAL: failed to extract client credentials"
            exit 1
        fi

        if ! store_credentials_in_vault; then
            log "FATAL: failed to store credentials in vault"
            exit 1
        fi

        log "job completed successfully"
    }

    main "$@"
{{- end }}
