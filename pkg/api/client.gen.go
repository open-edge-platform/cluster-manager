// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetV2Clusters request
	GetV2Clusters(ctx context.Context, params *GetV2ClustersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2ClustersWithBody request with any body
	PostV2ClustersWithBody(ctx context.Context, params *PostV2ClustersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2Clusters(ctx context.Context, params *PostV2ClustersParams, body PostV2ClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2ClustersSummary request
	GetV2ClustersSummary(ctx context.Context, params *GetV2ClustersSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV2ClustersName request
	DeleteV2ClustersName(ctx context.Context, name string, params *DeleteV2ClustersNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2ClustersName request
	GetV2ClustersName(ctx context.Context, name string, params *GetV2ClustersNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2ClustersNameKubeconfigs request
	GetV2ClustersNameKubeconfigs(ctx context.Context, name string, params *GetV2ClustersNameKubeconfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV2ClustersNameLabelsWithBody request with any body
	PutV2ClustersNameLabelsWithBody(ctx context.Context, name string, params *PutV2ClustersNameLabelsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV2ClustersNameLabels(ctx context.Context, name string, params *PutV2ClustersNameLabelsParams, body PutV2ClustersNameLabelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV2ClustersNameNodesWithBody request with any body
	PutV2ClustersNameNodesWithBody(ctx context.Context, name string, params *PutV2ClustersNameNodesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV2ClustersNameNodes(ctx context.Context, name string, params *PutV2ClustersNameNodesParams, body PutV2ClustersNameNodesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV2ClustersNameNodesNodeId request
	DeleteV2ClustersNameNodesNodeId(ctx context.Context, name string, nodeId string, params *DeleteV2ClustersNameNodesNodeIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV2ClustersNameTemplateWithBody request with any body
	PutV2ClustersNameTemplateWithBody(ctx context.Context, name string, params *PutV2ClustersNameTemplateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV2ClustersNameTemplate(ctx context.Context, name string, params *PutV2ClustersNameTemplateParams, body PutV2ClustersNameTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2ClustersNodeIdClusterdetail request
	GetV2ClustersNodeIdClusterdetail(ctx context.Context, nodeId string, params *GetV2ClustersNodeIdClusterdetailParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2Healthz request
	GetV2Healthz(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2Metrics request
	GetV2Metrics(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2Templates request
	GetV2Templates(ctx context.Context, params *GetV2TemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2TemplatesWithBody request with any body
	PostV2TemplatesWithBody(ctx context.Context, params *PostV2TemplatesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2Templates(ctx context.Context, params *PostV2TemplatesParams, body PostV2TemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV2TemplatesNameDefaultWithBody request with any body
	PutV2TemplatesNameDefaultWithBody(ctx context.Context, name string, params *PutV2TemplatesNameDefaultParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV2TemplatesNameDefault(ctx context.Context, name string, params *PutV2TemplatesNameDefaultParams, body PutV2TemplatesNameDefaultJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2TemplatesNameVersions request
	GetV2TemplatesNameVersions(ctx context.Context, name string, params *GetV2TemplatesNameVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV2TemplatesNameVersion request
	DeleteV2TemplatesNameVersion(ctx context.Context, name string, version string, params *DeleteV2TemplatesNameVersionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2TemplatesNameVersion request
	GetV2TemplatesNameVersion(ctx context.Context, name string, version string, params *GetV2TemplatesNameVersionParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetV2Clusters(ctx context.Context, params *GetV2ClustersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2ClustersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2ClustersWithBody(ctx context.Context, params *PostV2ClustersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2ClustersRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2Clusters(ctx context.Context, params *PostV2ClustersParams, body PostV2ClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2ClustersRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2ClustersSummary(ctx context.Context, params *GetV2ClustersSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2ClustersSummaryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV2ClustersName(ctx context.Context, name string, params *DeleteV2ClustersNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV2ClustersNameRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2ClustersName(ctx context.Context, name string, params *GetV2ClustersNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2ClustersNameRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2ClustersNameKubeconfigs(ctx context.Context, name string, params *GetV2ClustersNameKubeconfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2ClustersNameKubeconfigsRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV2ClustersNameLabelsWithBody(ctx context.Context, name string, params *PutV2ClustersNameLabelsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV2ClustersNameLabelsRequestWithBody(c.Server, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV2ClustersNameLabels(ctx context.Context, name string, params *PutV2ClustersNameLabelsParams, body PutV2ClustersNameLabelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV2ClustersNameLabelsRequest(c.Server, name, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV2ClustersNameNodesWithBody(ctx context.Context, name string, params *PutV2ClustersNameNodesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV2ClustersNameNodesRequestWithBody(c.Server, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV2ClustersNameNodes(ctx context.Context, name string, params *PutV2ClustersNameNodesParams, body PutV2ClustersNameNodesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV2ClustersNameNodesRequest(c.Server, name, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV2ClustersNameNodesNodeId(ctx context.Context, name string, nodeId string, params *DeleteV2ClustersNameNodesNodeIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV2ClustersNameNodesNodeIdRequest(c.Server, name, nodeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV2ClustersNameTemplateWithBody(ctx context.Context, name string, params *PutV2ClustersNameTemplateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV2ClustersNameTemplateRequestWithBody(c.Server, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV2ClustersNameTemplate(ctx context.Context, name string, params *PutV2ClustersNameTemplateParams, body PutV2ClustersNameTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV2ClustersNameTemplateRequest(c.Server, name, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2ClustersNodeIdClusterdetail(ctx context.Context, nodeId string, params *GetV2ClustersNodeIdClusterdetailParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2ClustersNodeIdClusterdetailRequest(c.Server, nodeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2Healthz(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2HealthzRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2Metrics(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2MetricsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2Templates(ctx context.Context, params *GetV2TemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2TemplatesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2TemplatesWithBody(ctx context.Context, params *PostV2TemplatesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2TemplatesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2Templates(ctx context.Context, params *PostV2TemplatesParams, body PostV2TemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2TemplatesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV2TemplatesNameDefaultWithBody(ctx context.Context, name string, params *PutV2TemplatesNameDefaultParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV2TemplatesNameDefaultRequestWithBody(c.Server, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV2TemplatesNameDefault(ctx context.Context, name string, params *PutV2TemplatesNameDefaultParams, body PutV2TemplatesNameDefaultJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV2TemplatesNameDefaultRequest(c.Server, name, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2TemplatesNameVersions(ctx context.Context, name string, params *GetV2TemplatesNameVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2TemplatesNameVersionsRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV2TemplatesNameVersion(ctx context.Context, name string, version string, params *DeleteV2TemplatesNameVersionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV2TemplatesNameVersionRequest(c.Server, name, version, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2TemplatesNameVersion(ctx context.Context, name string, version string, params *GetV2TemplatesNameVersionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2TemplatesNameVersionRequest(c.Server, name, version, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetV2ClustersRequest generates requests for GetV2Clusters
func NewGetV2ClustersRequest(server string, params *GetV2ClustersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/clusters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Activeprojectid", runtime.ParamLocationHeader, params.Activeprojectid)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Activeprojectid", headerParam0)

	}

	return req, nil
}

// NewPostV2ClustersRequest calls the generic PostV2Clusters builder with application/json body
func NewPostV2ClustersRequest(server string, params *PostV2ClustersParams, body PostV2ClustersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2ClustersRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostV2ClustersRequestWithBody generates requests for PostV2Clusters with any type of body
func NewPostV2ClustersRequestWithBody(server string, params *PostV2ClustersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/clusters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Activeprojectid", runtime.ParamLocationHeader, params.Activeprojectid)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Activeprojectid", headerParam0)

	}

	return req, nil
}

// NewGetV2ClustersSummaryRequest generates requests for GetV2ClustersSummary
func NewGetV2ClustersSummaryRequest(server string, params *GetV2ClustersSummaryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/clusters/summary")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Activeprojectid", runtime.ParamLocationHeader, params.Activeprojectid)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Activeprojectid", headerParam0)

	}

	return req, nil
}

// NewDeleteV2ClustersNameRequest generates requests for DeleteV2ClustersName
func NewDeleteV2ClustersNameRequest(server string, name string, params *DeleteV2ClustersNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/clusters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Activeprojectid", runtime.ParamLocationHeader, params.Activeprojectid)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Activeprojectid", headerParam0)

	}

	return req, nil
}

// NewGetV2ClustersNameRequest generates requests for GetV2ClustersName
func NewGetV2ClustersNameRequest(server string, name string, params *GetV2ClustersNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/clusters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Activeprojectid", runtime.ParamLocationHeader, params.Activeprojectid)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Activeprojectid", headerParam0)

	}

	return req, nil
}

// NewGetV2ClustersNameKubeconfigsRequest generates requests for GetV2ClustersNameKubeconfigs
func NewGetV2ClustersNameKubeconfigsRequest(server string, name string, params *GetV2ClustersNameKubeconfigsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/clusters/%s/kubeconfigs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Activeprojectid", runtime.ParamLocationHeader, params.Activeprojectid)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Activeprojectid", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam1)

	}

	return req, nil
}

// NewPutV2ClustersNameLabelsRequest calls the generic PutV2ClustersNameLabels builder with application/json body
func NewPutV2ClustersNameLabelsRequest(server string, name string, params *PutV2ClustersNameLabelsParams, body PutV2ClustersNameLabelsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV2ClustersNameLabelsRequestWithBody(server, name, params, "application/json", bodyReader)
}

// NewPutV2ClustersNameLabelsRequestWithBody generates requests for PutV2ClustersNameLabels with any type of body
func NewPutV2ClustersNameLabelsRequestWithBody(server string, name string, params *PutV2ClustersNameLabelsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/clusters/%s/labels", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Activeprojectid", runtime.ParamLocationHeader, params.Activeprojectid)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Activeprojectid", headerParam0)

	}

	return req, nil
}

// NewPutV2ClustersNameNodesRequest calls the generic PutV2ClustersNameNodes builder with application/json body
func NewPutV2ClustersNameNodesRequest(server string, name string, params *PutV2ClustersNameNodesParams, body PutV2ClustersNameNodesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV2ClustersNameNodesRequestWithBody(server, name, params, "application/json", bodyReader)
}

// NewPutV2ClustersNameNodesRequestWithBody generates requests for PutV2ClustersNameNodes with any type of body
func NewPutV2ClustersNameNodesRequestWithBody(server string, name string, params *PutV2ClustersNameNodesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/clusters/%s/nodes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Activeprojectid", runtime.ParamLocationHeader, params.Activeprojectid)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Activeprojectid", headerParam0)

	}

	return req, nil
}

// NewDeleteV2ClustersNameNodesNodeIdRequest generates requests for DeleteV2ClustersNameNodesNodeId
func NewDeleteV2ClustersNameNodesNodeIdRequest(server string, name string, nodeId string, params *DeleteV2ClustersNameNodesNodeIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "nodeId", runtime.ParamLocationPath, nodeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/clusters/%s/nodes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Force != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force", runtime.ParamLocationQuery, *params.Force); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Activeprojectid", runtime.ParamLocationHeader, params.Activeprojectid)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Activeprojectid", headerParam0)

	}

	return req, nil
}

// NewPutV2ClustersNameTemplateRequest calls the generic PutV2ClustersNameTemplate builder with application/json body
func NewPutV2ClustersNameTemplateRequest(server string, name string, params *PutV2ClustersNameTemplateParams, body PutV2ClustersNameTemplateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV2ClustersNameTemplateRequestWithBody(server, name, params, "application/json", bodyReader)
}

// NewPutV2ClustersNameTemplateRequestWithBody generates requests for PutV2ClustersNameTemplate with any type of body
func NewPutV2ClustersNameTemplateRequestWithBody(server string, name string, params *PutV2ClustersNameTemplateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/clusters/%s/template", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Activeprojectid", runtime.ParamLocationHeader, params.Activeprojectid)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Activeprojectid", headerParam0)

	}

	return req, nil
}

// NewGetV2ClustersNodeIdClusterdetailRequest generates requests for GetV2ClustersNodeIdClusterdetail
func NewGetV2ClustersNodeIdClusterdetailRequest(server string, nodeId string, params *GetV2ClustersNodeIdClusterdetailParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nodeId", runtime.ParamLocationPath, nodeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/clusters/%s/clusterdetail", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Activeprojectid", runtime.ParamLocationHeader, params.Activeprojectid)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Activeprojectid", headerParam0)

	}

	return req, nil
}

// NewGetV2HealthzRequest generates requests for GetV2Healthz
func NewGetV2HealthzRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/healthz")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2MetricsRequest generates requests for GetV2Metrics
func NewGetV2MetricsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/metrics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2TemplatesRequest generates requests for GetV2Templates
func NewGetV2TemplatesRequest(server string, params *GetV2TemplatesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/templates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Default != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "default", runtime.ParamLocationQuery, *params.Default); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Activeprojectid", runtime.ParamLocationHeader, params.Activeprojectid)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Activeprojectid", headerParam0)

	}

	return req, nil
}

// NewPostV2TemplatesRequest calls the generic PostV2Templates builder with application/json body
func NewPostV2TemplatesRequest(server string, params *PostV2TemplatesParams, body PostV2TemplatesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2TemplatesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostV2TemplatesRequestWithBody generates requests for PostV2Templates with any type of body
func NewPostV2TemplatesRequestWithBody(server string, params *PostV2TemplatesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/templates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Activeprojectid", runtime.ParamLocationHeader, params.Activeprojectid)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Activeprojectid", headerParam0)

	}

	return req, nil
}

// NewPutV2TemplatesNameDefaultRequest calls the generic PutV2TemplatesNameDefault builder with application/json body
func NewPutV2TemplatesNameDefaultRequest(server string, name string, params *PutV2TemplatesNameDefaultParams, body PutV2TemplatesNameDefaultJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV2TemplatesNameDefaultRequestWithBody(server, name, params, "application/json", bodyReader)
}

// NewPutV2TemplatesNameDefaultRequestWithBody generates requests for PutV2TemplatesNameDefault with any type of body
func NewPutV2TemplatesNameDefaultRequestWithBody(server string, name string, params *PutV2TemplatesNameDefaultParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/templates/%s/default", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Activeprojectid", runtime.ParamLocationHeader, params.Activeprojectid)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Activeprojectid", headerParam0)

	}

	return req, nil
}

// NewGetV2TemplatesNameVersionsRequest generates requests for GetV2TemplatesNameVersions
func NewGetV2TemplatesNameVersionsRequest(server string, name string, params *GetV2TemplatesNameVersionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/templates/%s/versions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Activeprojectid", runtime.ParamLocationHeader, params.Activeprojectid)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Activeprojectid", headerParam0)

	}

	return req, nil
}

// NewDeleteV2TemplatesNameVersionRequest generates requests for DeleteV2TemplatesNameVersion
func NewDeleteV2TemplatesNameVersionRequest(server string, name string, version string, params *DeleteV2TemplatesNameVersionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/templates/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Activeprojectid", runtime.ParamLocationHeader, params.Activeprojectid)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Activeprojectid", headerParam0)

	}

	return req, nil
}

// NewGetV2TemplatesNameVersionRequest generates requests for GetV2TemplatesNameVersion
func NewGetV2TemplatesNameVersionRequest(server string, name string, version string, params *GetV2TemplatesNameVersionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/templates/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Activeprojectid", runtime.ParamLocationHeader, params.Activeprojectid)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Activeprojectid", headerParam0)

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetV2ClustersWithResponse request
	GetV2ClustersWithResponse(ctx context.Context, params *GetV2ClustersParams, reqEditors ...RequestEditorFn) (*GetV2ClustersResponse, error)

	// PostV2ClustersWithBodyWithResponse request with any body
	PostV2ClustersWithBodyWithResponse(ctx context.Context, params *PostV2ClustersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2ClustersResponse, error)

	PostV2ClustersWithResponse(ctx context.Context, params *PostV2ClustersParams, body PostV2ClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2ClustersResponse, error)

	// GetV2ClustersSummaryWithResponse request
	GetV2ClustersSummaryWithResponse(ctx context.Context, params *GetV2ClustersSummaryParams, reqEditors ...RequestEditorFn) (*GetV2ClustersSummaryResponse, error)

	// DeleteV2ClustersNameWithResponse request
	DeleteV2ClustersNameWithResponse(ctx context.Context, name string, params *DeleteV2ClustersNameParams, reqEditors ...RequestEditorFn) (*DeleteV2ClustersNameResponse, error)

	// GetV2ClustersNameWithResponse request
	GetV2ClustersNameWithResponse(ctx context.Context, name string, params *GetV2ClustersNameParams, reqEditors ...RequestEditorFn) (*GetV2ClustersNameResponse, error)

	// GetV2ClustersNameKubeconfigsWithResponse request
	GetV2ClustersNameKubeconfigsWithResponse(ctx context.Context, name string, params *GetV2ClustersNameKubeconfigsParams, reqEditors ...RequestEditorFn) (*GetV2ClustersNameKubeconfigsResponse, error)

	// PutV2ClustersNameLabelsWithBodyWithResponse request with any body
	PutV2ClustersNameLabelsWithBodyWithResponse(ctx context.Context, name string, params *PutV2ClustersNameLabelsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV2ClustersNameLabelsResponse, error)

	PutV2ClustersNameLabelsWithResponse(ctx context.Context, name string, params *PutV2ClustersNameLabelsParams, body PutV2ClustersNameLabelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2ClustersNameLabelsResponse, error)

	// PutV2ClustersNameNodesWithBodyWithResponse request with any body
	PutV2ClustersNameNodesWithBodyWithResponse(ctx context.Context, name string, params *PutV2ClustersNameNodesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV2ClustersNameNodesResponse, error)

	PutV2ClustersNameNodesWithResponse(ctx context.Context, name string, params *PutV2ClustersNameNodesParams, body PutV2ClustersNameNodesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2ClustersNameNodesResponse, error)

	// DeleteV2ClustersNameNodesNodeIdWithResponse request
	DeleteV2ClustersNameNodesNodeIdWithResponse(ctx context.Context, name string, nodeId string, params *DeleteV2ClustersNameNodesNodeIdParams, reqEditors ...RequestEditorFn) (*DeleteV2ClustersNameNodesNodeIdResponse, error)

	// PutV2ClustersNameTemplateWithBodyWithResponse request with any body
	PutV2ClustersNameTemplateWithBodyWithResponse(ctx context.Context, name string, params *PutV2ClustersNameTemplateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV2ClustersNameTemplateResponse, error)

	PutV2ClustersNameTemplateWithResponse(ctx context.Context, name string, params *PutV2ClustersNameTemplateParams, body PutV2ClustersNameTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2ClustersNameTemplateResponse, error)

	// GetV2ClustersNodeIdClusterdetailWithResponse request
	GetV2ClustersNodeIdClusterdetailWithResponse(ctx context.Context, nodeId string, params *GetV2ClustersNodeIdClusterdetailParams, reqEditors ...RequestEditorFn) (*GetV2ClustersNodeIdClusterdetailResponse, error)

	// GetV2HealthzWithResponse request
	GetV2HealthzWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2HealthzResponse, error)

	// GetV2MetricsWithResponse request
	GetV2MetricsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2MetricsResponse, error)

	// GetV2TemplatesWithResponse request
	GetV2TemplatesWithResponse(ctx context.Context, params *GetV2TemplatesParams, reqEditors ...RequestEditorFn) (*GetV2TemplatesResponse, error)

	// PostV2TemplatesWithBodyWithResponse request with any body
	PostV2TemplatesWithBodyWithResponse(ctx context.Context, params *PostV2TemplatesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2TemplatesResponse, error)

	PostV2TemplatesWithResponse(ctx context.Context, params *PostV2TemplatesParams, body PostV2TemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2TemplatesResponse, error)

	// PutV2TemplatesNameDefaultWithBodyWithResponse request with any body
	PutV2TemplatesNameDefaultWithBodyWithResponse(ctx context.Context, name string, params *PutV2TemplatesNameDefaultParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV2TemplatesNameDefaultResponse, error)

	PutV2TemplatesNameDefaultWithResponse(ctx context.Context, name string, params *PutV2TemplatesNameDefaultParams, body PutV2TemplatesNameDefaultJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2TemplatesNameDefaultResponse, error)

	// GetV2TemplatesNameVersionsWithResponse request
	GetV2TemplatesNameVersionsWithResponse(ctx context.Context, name string, params *GetV2TemplatesNameVersionsParams, reqEditors ...RequestEditorFn) (*GetV2TemplatesNameVersionsResponse, error)

	// DeleteV2TemplatesNameVersionWithResponse request
	DeleteV2TemplatesNameVersionWithResponse(ctx context.Context, name string, version string, params *DeleteV2TemplatesNameVersionParams, reqEditors ...RequestEditorFn) (*DeleteV2TemplatesNameVersionResponse, error)

	// GetV2TemplatesNameVersionWithResponse request
	GetV2TemplatesNameVersionWithResponse(ctx context.Context, name string, version string, params *GetV2TemplatesNameVersionParams, reqEditors ...RequestEditorFn) (*GetV2TemplatesNameVersionResponse, error)
}

type GetV2ClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Clusters *[]ClusterInfo `json:"clusters,omitempty"`

		// TotalElements The count of items in the entire list, regardless of pagination.
		TotalElements int32 `json:"totalElements"`
	}
	JSON400 *N400BadRequest
	JSON500 *N500InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetV2ClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2ClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2ClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *string
	JSON400      *N400BadRequest
	JSON500      *N500InternalServerError
}

// Status returns HTTPResponse.Status
func (r PostV2ClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2ClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2ClustersSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusterSummary
	JSON400      *N400BadRequest
	JSON500      *N500InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetV2ClustersSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2ClustersSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV2ClustersNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON404      *N404NotFound
	JSON500      *N500InternalServerError
}

// Status returns HTTPResponse.Status
func (r DeleteV2ClustersNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV2ClustersNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2ClustersNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusterDetailInfo
	JSON400      *N400BadRequest
	JSON404      *N404NotFound
	JSON500      *N500InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetV2ClustersNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2ClustersNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2ClustersNameKubeconfigsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *KubeconfigInfo
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON404      *N404NotFound
	JSON500      *N500InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetV2ClustersNameKubeconfigsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2ClustersNameKubeconfigsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV2ClustersNameLabelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON404      *N404NotFound
	JSON500      *N500InternalServerError
}

// Status returns HTTPResponse.Status
func (r PutV2ClustersNameLabelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV2ClustersNameLabelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV2ClustersNameNodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON404      *N404NotFound
	JSON500      *N500InternalServerError
}

// Status returns HTTPResponse.Status
func (r PutV2ClustersNameNodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV2ClustersNameNodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV2ClustersNameNodesNodeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON404      *N404NotFound
	JSON500      *N500InternalServerError
}

// Status returns HTTPResponse.Status
func (r DeleteV2ClustersNameNodesNodeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV2ClustersNameNodesNodeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV2ClustersNameTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON404      *N404NotFound
	JSON500      *N500InternalServerError
	JSON501      *N501NotImplemented
}

// Status returns HTTPResponse.Status
func (r PutV2ClustersNameTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV2ClustersNameTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2ClustersNodeIdClusterdetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusterDetailInfo
	JSON400      *N400BadRequest
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r GetV2ClustersNodeIdClusterdetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2ClustersNodeIdClusterdetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2HealthzResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON500      *N500InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetV2HealthzResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2HealthzResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2MetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON500      *N500InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetV2MetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2MetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2TemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TemplateInfoList
	JSON400      *N400BadRequest
	JSON404      *N404NotFound
	JSON500      *N500InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetV2TemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2TemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2TemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *string
	JSON400      *N400BadRequest
	JSON409      *N409Conflict
	JSON500      *N500InternalServerError
}

// Status returns HTTPResponse.Status
func (r PostV2TemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2TemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV2TemplatesNameDefaultResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON404      *N404NotFound
	JSON500      *N500InternalServerError
}

// Status returns HTTPResponse.Status
func (r PutV2TemplatesNameDefaultResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV2TemplatesNameDefaultResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2TemplatesNameVersionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VersionList
	JSON400      *N400BadRequest
	JSON404      *N404NotFound
	JSON500      *N500InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetV2TemplatesNameVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2TemplatesNameVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV2TemplatesNameVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON404      *N404NotFound
	JSON500      *N500InternalServerError
}

// Status returns HTTPResponse.Status
func (r DeleteV2TemplatesNameVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV2TemplatesNameVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2TemplatesNameVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TemplateInfo
	JSON400      *N400BadRequest
	JSON404      *N404NotFound
	JSON500      *N500InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetV2TemplatesNameVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2TemplatesNameVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetV2ClustersWithResponse request returning *GetV2ClustersResponse
func (c *ClientWithResponses) GetV2ClustersWithResponse(ctx context.Context, params *GetV2ClustersParams, reqEditors ...RequestEditorFn) (*GetV2ClustersResponse, error) {
	rsp, err := c.GetV2Clusters(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2ClustersResponse(rsp)
}

// PostV2ClustersWithBodyWithResponse request with arbitrary body returning *PostV2ClustersResponse
func (c *ClientWithResponses) PostV2ClustersWithBodyWithResponse(ctx context.Context, params *PostV2ClustersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2ClustersResponse, error) {
	rsp, err := c.PostV2ClustersWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2ClustersResponse(rsp)
}

func (c *ClientWithResponses) PostV2ClustersWithResponse(ctx context.Context, params *PostV2ClustersParams, body PostV2ClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2ClustersResponse, error) {
	rsp, err := c.PostV2Clusters(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2ClustersResponse(rsp)
}

// GetV2ClustersSummaryWithResponse request returning *GetV2ClustersSummaryResponse
func (c *ClientWithResponses) GetV2ClustersSummaryWithResponse(ctx context.Context, params *GetV2ClustersSummaryParams, reqEditors ...RequestEditorFn) (*GetV2ClustersSummaryResponse, error) {
	rsp, err := c.GetV2ClustersSummary(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2ClustersSummaryResponse(rsp)
}

// DeleteV2ClustersNameWithResponse request returning *DeleteV2ClustersNameResponse
func (c *ClientWithResponses) DeleteV2ClustersNameWithResponse(ctx context.Context, name string, params *DeleteV2ClustersNameParams, reqEditors ...RequestEditorFn) (*DeleteV2ClustersNameResponse, error) {
	rsp, err := c.DeleteV2ClustersName(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV2ClustersNameResponse(rsp)
}

// GetV2ClustersNameWithResponse request returning *GetV2ClustersNameResponse
func (c *ClientWithResponses) GetV2ClustersNameWithResponse(ctx context.Context, name string, params *GetV2ClustersNameParams, reqEditors ...RequestEditorFn) (*GetV2ClustersNameResponse, error) {
	rsp, err := c.GetV2ClustersName(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2ClustersNameResponse(rsp)
}

// GetV2ClustersNameKubeconfigsWithResponse request returning *GetV2ClustersNameKubeconfigsResponse
func (c *ClientWithResponses) GetV2ClustersNameKubeconfigsWithResponse(ctx context.Context, name string, params *GetV2ClustersNameKubeconfigsParams, reqEditors ...RequestEditorFn) (*GetV2ClustersNameKubeconfigsResponse, error) {
	rsp, err := c.GetV2ClustersNameKubeconfigs(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2ClustersNameKubeconfigsResponse(rsp)
}

// PutV2ClustersNameLabelsWithBodyWithResponse request with arbitrary body returning *PutV2ClustersNameLabelsResponse
func (c *ClientWithResponses) PutV2ClustersNameLabelsWithBodyWithResponse(ctx context.Context, name string, params *PutV2ClustersNameLabelsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV2ClustersNameLabelsResponse, error) {
	rsp, err := c.PutV2ClustersNameLabelsWithBody(ctx, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV2ClustersNameLabelsResponse(rsp)
}

func (c *ClientWithResponses) PutV2ClustersNameLabelsWithResponse(ctx context.Context, name string, params *PutV2ClustersNameLabelsParams, body PutV2ClustersNameLabelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2ClustersNameLabelsResponse, error) {
	rsp, err := c.PutV2ClustersNameLabels(ctx, name, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV2ClustersNameLabelsResponse(rsp)
}

// PutV2ClustersNameNodesWithBodyWithResponse request with arbitrary body returning *PutV2ClustersNameNodesResponse
func (c *ClientWithResponses) PutV2ClustersNameNodesWithBodyWithResponse(ctx context.Context, name string, params *PutV2ClustersNameNodesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV2ClustersNameNodesResponse, error) {
	rsp, err := c.PutV2ClustersNameNodesWithBody(ctx, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV2ClustersNameNodesResponse(rsp)
}

func (c *ClientWithResponses) PutV2ClustersNameNodesWithResponse(ctx context.Context, name string, params *PutV2ClustersNameNodesParams, body PutV2ClustersNameNodesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2ClustersNameNodesResponse, error) {
	rsp, err := c.PutV2ClustersNameNodes(ctx, name, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV2ClustersNameNodesResponse(rsp)
}

// DeleteV2ClustersNameNodesNodeIdWithResponse request returning *DeleteV2ClustersNameNodesNodeIdResponse
func (c *ClientWithResponses) DeleteV2ClustersNameNodesNodeIdWithResponse(ctx context.Context, name string, nodeId string, params *DeleteV2ClustersNameNodesNodeIdParams, reqEditors ...RequestEditorFn) (*DeleteV2ClustersNameNodesNodeIdResponse, error) {
	rsp, err := c.DeleteV2ClustersNameNodesNodeId(ctx, name, nodeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV2ClustersNameNodesNodeIdResponse(rsp)
}

// PutV2ClustersNameTemplateWithBodyWithResponse request with arbitrary body returning *PutV2ClustersNameTemplateResponse
func (c *ClientWithResponses) PutV2ClustersNameTemplateWithBodyWithResponse(ctx context.Context, name string, params *PutV2ClustersNameTemplateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV2ClustersNameTemplateResponse, error) {
	rsp, err := c.PutV2ClustersNameTemplateWithBody(ctx, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV2ClustersNameTemplateResponse(rsp)
}

func (c *ClientWithResponses) PutV2ClustersNameTemplateWithResponse(ctx context.Context, name string, params *PutV2ClustersNameTemplateParams, body PutV2ClustersNameTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2ClustersNameTemplateResponse, error) {
	rsp, err := c.PutV2ClustersNameTemplate(ctx, name, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV2ClustersNameTemplateResponse(rsp)
}

// GetV2ClustersNodeIdClusterdetailWithResponse request returning *GetV2ClustersNodeIdClusterdetailResponse
func (c *ClientWithResponses) GetV2ClustersNodeIdClusterdetailWithResponse(ctx context.Context, nodeId string, params *GetV2ClustersNodeIdClusterdetailParams, reqEditors ...RequestEditorFn) (*GetV2ClustersNodeIdClusterdetailResponse, error) {
	rsp, err := c.GetV2ClustersNodeIdClusterdetail(ctx, nodeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2ClustersNodeIdClusterdetailResponse(rsp)
}

// GetV2HealthzWithResponse request returning *GetV2HealthzResponse
func (c *ClientWithResponses) GetV2HealthzWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2HealthzResponse, error) {
	rsp, err := c.GetV2Healthz(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2HealthzResponse(rsp)
}

// GetV2MetricsWithResponse request returning *GetV2MetricsResponse
func (c *ClientWithResponses) GetV2MetricsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2MetricsResponse, error) {
	rsp, err := c.GetV2Metrics(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2MetricsResponse(rsp)
}

// GetV2TemplatesWithResponse request returning *GetV2TemplatesResponse
func (c *ClientWithResponses) GetV2TemplatesWithResponse(ctx context.Context, params *GetV2TemplatesParams, reqEditors ...RequestEditorFn) (*GetV2TemplatesResponse, error) {
	rsp, err := c.GetV2Templates(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2TemplatesResponse(rsp)
}

// PostV2TemplatesWithBodyWithResponse request with arbitrary body returning *PostV2TemplatesResponse
func (c *ClientWithResponses) PostV2TemplatesWithBodyWithResponse(ctx context.Context, params *PostV2TemplatesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2TemplatesResponse, error) {
	rsp, err := c.PostV2TemplatesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2TemplatesResponse(rsp)
}

func (c *ClientWithResponses) PostV2TemplatesWithResponse(ctx context.Context, params *PostV2TemplatesParams, body PostV2TemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2TemplatesResponse, error) {
	rsp, err := c.PostV2Templates(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2TemplatesResponse(rsp)
}

// PutV2TemplatesNameDefaultWithBodyWithResponse request with arbitrary body returning *PutV2TemplatesNameDefaultResponse
func (c *ClientWithResponses) PutV2TemplatesNameDefaultWithBodyWithResponse(ctx context.Context, name string, params *PutV2TemplatesNameDefaultParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV2TemplatesNameDefaultResponse, error) {
	rsp, err := c.PutV2TemplatesNameDefaultWithBody(ctx, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV2TemplatesNameDefaultResponse(rsp)
}

func (c *ClientWithResponses) PutV2TemplatesNameDefaultWithResponse(ctx context.Context, name string, params *PutV2TemplatesNameDefaultParams, body PutV2TemplatesNameDefaultJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2TemplatesNameDefaultResponse, error) {
	rsp, err := c.PutV2TemplatesNameDefault(ctx, name, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV2TemplatesNameDefaultResponse(rsp)
}

// GetV2TemplatesNameVersionsWithResponse request returning *GetV2TemplatesNameVersionsResponse
func (c *ClientWithResponses) GetV2TemplatesNameVersionsWithResponse(ctx context.Context, name string, params *GetV2TemplatesNameVersionsParams, reqEditors ...RequestEditorFn) (*GetV2TemplatesNameVersionsResponse, error) {
	rsp, err := c.GetV2TemplatesNameVersions(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2TemplatesNameVersionsResponse(rsp)
}

// DeleteV2TemplatesNameVersionWithResponse request returning *DeleteV2TemplatesNameVersionResponse
func (c *ClientWithResponses) DeleteV2TemplatesNameVersionWithResponse(ctx context.Context, name string, version string, params *DeleteV2TemplatesNameVersionParams, reqEditors ...RequestEditorFn) (*DeleteV2TemplatesNameVersionResponse, error) {
	rsp, err := c.DeleteV2TemplatesNameVersion(ctx, name, version, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV2TemplatesNameVersionResponse(rsp)
}

// GetV2TemplatesNameVersionWithResponse request returning *GetV2TemplatesNameVersionResponse
func (c *ClientWithResponses) GetV2TemplatesNameVersionWithResponse(ctx context.Context, name string, version string, params *GetV2TemplatesNameVersionParams, reqEditors ...RequestEditorFn) (*GetV2TemplatesNameVersionResponse, error) {
	rsp, err := c.GetV2TemplatesNameVersion(ctx, name, version, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2TemplatesNameVersionResponse(rsp)
}

// ParseGetV2ClustersResponse parses an HTTP response from a GetV2ClustersWithResponse call
func ParseGetV2ClustersResponse(rsp *http.Response) (*GetV2ClustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2ClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Clusters *[]ClusterInfo `json:"clusters,omitempty"`

			// TotalElements The count of items in the entire list, regardless of pagination.
			TotalElements int32 `json:"totalElements"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostV2ClustersResponse parses an HTTP response from a PostV2ClustersWithResponse call
func ParsePostV2ClustersResponse(rsp *http.Response) (*PostV2ClustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2ClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV2ClustersSummaryResponse parses an HTTP response from a GetV2ClustersSummaryWithResponse call
func ParseGetV2ClustersSummaryResponse(rsp *http.Response) (*GetV2ClustersSummaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2ClustersSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusterSummary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteV2ClustersNameResponse parses an HTTP response from a DeleteV2ClustersNameWithResponse call
func ParseDeleteV2ClustersNameResponse(rsp *http.Response) (*DeleteV2ClustersNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV2ClustersNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV2ClustersNameResponse parses an HTTP response from a GetV2ClustersNameWithResponse call
func ParseGetV2ClustersNameResponse(rsp *http.Response) (*GetV2ClustersNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2ClustersNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusterDetailInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV2ClustersNameKubeconfigsResponse parses an HTTP response from a GetV2ClustersNameKubeconfigsWithResponse call
func ParseGetV2ClustersNameKubeconfigsResponse(rsp *http.Response) (*GetV2ClustersNameKubeconfigsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2ClustersNameKubeconfigsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest KubeconfigInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutV2ClustersNameLabelsResponse parses an HTTP response from a PutV2ClustersNameLabelsWithResponse call
func ParsePutV2ClustersNameLabelsResponse(rsp *http.Response) (*PutV2ClustersNameLabelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV2ClustersNameLabelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutV2ClustersNameNodesResponse parses an HTTP response from a PutV2ClustersNameNodesWithResponse call
func ParsePutV2ClustersNameNodesResponse(rsp *http.Response) (*PutV2ClustersNameNodesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV2ClustersNameNodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteV2ClustersNameNodesNodeIdResponse parses an HTTP response from a DeleteV2ClustersNameNodesNodeIdWithResponse call
func ParseDeleteV2ClustersNameNodesNodeIdResponse(rsp *http.Response) (*DeleteV2ClustersNameNodesNodeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV2ClustersNameNodesNodeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutV2ClustersNameTemplateResponse parses an HTTP response from a PutV2ClustersNameTemplateWithResponse call
func ParsePutV2ClustersNameTemplateResponse(rsp *http.Response) (*PutV2ClustersNameTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV2ClustersNameTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501NotImplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	}

	return response, nil
}

// ParseGetV2ClustersNodeIdClusterdetailResponse parses an HTTP response from a GetV2ClustersNodeIdClusterdetailWithResponse call
func ParseGetV2ClustersNodeIdClusterdetailResponse(rsp *http.Response) (*GetV2ClustersNodeIdClusterdetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2ClustersNodeIdClusterdetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusterDetailInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV2HealthzResponse parses an HTTP response from a GetV2HealthzWithResponse call
func ParseGetV2HealthzResponse(rsp *http.Response) (*GetV2HealthzResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2HealthzResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV2MetricsResponse parses an HTTP response from a GetV2MetricsWithResponse call
func ParseGetV2MetricsResponse(rsp *http.Response) (*GetV2MetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2MetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV2TemplatesResponse parses an HTTP response from a GetV2TemplatesWithResponse call
func ParseGetV2TemplatesResponse(rsp *http.Response) (*GetV2TemplatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2TemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TemplateInfoList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostV2TemplatesResponse parses an HTTP response from a PostV2TemplatesWithResponse call
func ParsePostV2TemplatesResponse(rsp *http.Response) (*PostV2TemplatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2TemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutV2TemplatesNameDefaultResponse parses an HTTP response from a PutV2TemplatesNameDefaultWithResponse call
func ParsePutV2TemplatesNameDefaultResponse(rsp *http.Response) (*PutV2TemplatesNameDefaultResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV2TemplatesNameDefaultResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV2TemplatesNameVersionsResponse parses an HTTP response from a GetV2TemplatesNameVersionsWithResponse call
func ParseGetV2TemplatesNameVersionsResponse(rsp *http.Response) (*GetV2TemplatesNameVersionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2TemplatesNameVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VersionList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteV2TemplatesNameVersionResponse parses an HTTP response from a DeleteV2TemplatesNameVersionWithResponse call
func ParseDeleteV2TemplatesNameVersionResponse(rsp *http.Response) (*DeleteV2TemplatesNameVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV2TemplatesNameVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV2TemplatesNameVersionResponse parses an HTTP response from a GetV2TemplatesNameVersionWithResponse call
func ParseGetV2TemplatesNameVersionResponse(rsp *http.Response) (*GetV2TemplatesNameVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2TemplatesNameVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TemplateInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
