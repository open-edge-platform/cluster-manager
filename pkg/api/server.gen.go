//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /v2/clusters)
	GetV2Clusters(w http.ResponseWriter, r *http.Request, params GetV2ClustersParams)

	// (POST /v2/clusters)
	PostV2Clusters(w http.ResponseWriter, r *http.Request, params PostV2ClustersParams)

	// (GET /v2/clusters/summary)
	GetV2ClustersSummary(w http.ResponseWriter, r *http.Request, params GetV2ClustersSummaryParams)

	// (DELETE /v2/clusters/{name})
	DeleteV2ClustersName(w http.ResponseWriter, r *http.Request, name string, params DeleteV2ClustersNameParams)

	// (GET /v2/clusters/{name})
	GetV2ClustersName(w http.ResponseWriter, r *http.Request, name string, params GetV2ClustersNameParams)

	// (GET /v2/clusters/{name}/kubeconfigs)
	GetV2ClustersNameKubeconfigs(w http.ResponseWriter, r *http.Request, name string, params GetV2ClustersNameKubeconfigsParams)

	// (PUT /v2/clusters/{name}/labels)
	PutV2ClustersNameLabels(w http.ResponseWriter, r *http.Request, name string, params PutV2ClustersNameLabelsParams)

	// (PUT /v2/clusters/{name}/nodes)
	PutV2ClustersNameNodes(w http.ResponseWriter, r *http.Request, name string, params PutV2ClustersNameNodesParams)

	// (DELETE /v2/clusters/{name}/nodes/{nodeId})
	DeleteV2ClustersNameNodesNodeId(w http.ResponseWriter, r *http.Request, name string, nodeId string, params DeleteV2ClustersNameNodesNodeIdParams)

	// (PUT /v2/clusters/{name}/template)
	PutV2ClustersNameTemplate(w http.ResponseWriter, r *http.Request, name string, params PutV2ClustersNameTemplateParams)

	// (GET /v2/clusters/{nodeId}/clusterdetail)
	GetV2ClustersNodeIdClusterdetail(w http.ResponseWriter, r *http.Request, nodeId string, params GetV2ClustersNodeIdClusterdetailParams)

	// (GET /v2/healthz)
	GetV2Healthz(w http.ResponseWriter, r *http.Request)

	// (GET /v2/templates)
	GetV2Templates(w http.ResponseWriter, r *http.Request, params GetV2TemplatesParams)

	// (POST /v2/templates)
	PostV2Templates(w http.ResponseWriter, r *http.Request, params PostV2TemplatesParams)

	// (PUT /v2/templates/{name}/default)
	PutV2TemplatesNameDefault(w http.ResponseWriter, r *http.Request, name string, params PutV2TemplatesNameDefaultParams)

	// (GET /v2/templates/{name}/versions)
	GetV2TemplatesNameVersions(w http.ResponseWriter, r *http.Request, name string, params GetV2TemplatesNameVersionsParams)

	// (DELETE /v2/templates/{name}/{version})
	DeleteV2TemplatesNameVersion(w http.ResponseWriter, r *http.Request, name string, version string, params DeleteV2TemplatesNameVersionParams)

	// (GET /v2/templates/{name}/{version})
	GetV2TemplatesNameVersion(w http.ResponseWriter, r *http.Request, name string, version string, params GetV2TemplatesNameVersionParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetV2Clusters operation middleware
func (siw *ServerInterfaceWrapper) GetV2Clusters(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, HTTPScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV2ClustersParams

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "Activeprojectid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Activeprojectid")]; found {
		var Activeprojectid ActiveProjectIdHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Activeprojectid", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Activeprojectid", valueList[0], &Activeprojectid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Activeprojectid", Err: err})
			return
		}

		params.Activeprojectid = Activeprojectid

	} else {
		err := fmt.Errorf("Header parameter Activeprojectid is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Activeprojectid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV2Clusters(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostV2Clusters operation middleware
func (siw *ServerInterfaceWrapper) PostV2Clusters(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, HTTPScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params PostV2ClustersParams

	headers := r.Header

	// ------------- Required header parameter "Activeprojectid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Activeprojectid")]; found {
		var Activeprojectid ActiveProjectIdHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Activeprojectid", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Activeprojectid", valueList[0], &Activeprojectid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Activeprojectid", Err: err})
			return
		}

		params.Activeprojectid = Activeprojectid

	} else {
		err := fmt.Errorf("Header parameter Activeprojectid is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Activeprojectid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostV2Clusters(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetV2ClustersSummary operation middleware
func (siw *ServerInterfaceWrapper) GetV2ClustersSummary(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, HTTPScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV2ClustersSummaryParams

	headers := r.Header

	// ------------- Required header parameter "Activeprojectid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Activeprojectid")]; found {
		var Activeprojectid ActiveProjectIdHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Activeprojectid", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Activeprojectid", valueList[0], &Activeprojectid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Activeprojectid", Err: err})
			return
		}

		params.Activeprojectid = Activeprojectid

	} else {
		err := fmt.Errorf("Header parameter Activeprojectid is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Activeprojectid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV2ClustersSummary(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteV2ClustersName operation middleware
func (siw *ServerInterfaceWrapper) DeleteV2ClustersName(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", r.PathValue("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HTTPScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteV2ClustersNameParams

	headers := r.Header

	// ------------- Required header parameter "Activeprojectid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Activeprojectid")]; found {
		var Activeprojectid ActiveProjectIdHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Activeprojectid", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Activeprojectid", valueList[0], &Activeprojectid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Activeprojectid", Err: err})
			return
		}

		params.Activeprojectid = Activeprojectid

	} else {
		err := fmt.Errorf("Header parameter Activeprojectid is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Activeprojectid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteV2ClustersName(w, r, name, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetV2ClustersName operation middleware
func (siw *ServerInterfaceWrapper) GetV2ClustersName(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", r.PathValue("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HTTPScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV2ClustersNameParams

	headers := r.Header

	// ------------- Required header parameter "Activeprojectid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Activeprojectid")]; found {
		var Activeprojectid ActiveProjectIdHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Activeprojectid", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Activeprojectid", valueList[0], &Activeprojectid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Activeprojectid", Err: err})
			return
		}

		params.Activeprojectid = Activeprojectid

	} else {
		err := fmt.Errorf("Header parameter Activeprojectid is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Activeprojectid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV2ClustersName(w, r, name, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetV2ClustersNameKubeconfigs operation middleware
func (siw *ServerInterfaceWrapper) GetV2ClustersNameKubeconfigs(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", r.PathValue("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HTTPScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV2ClustersNameKubeconfigsParams

	headers := r.Header

	// ------------- Required header parameter "Activeprojectid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Activeprojectid")]; found {
		var Activeprojectid ActiveProjectIdHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Activeprojectid", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Activeprojectid", valueList[0], &Activeprojectid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Activeprojectid", Err: err})
			return
		}

		params.Activeprojectid = Activeprojectid

	} else {
		err := fmt.Errorf("Header parameter Activeprojectid is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Activeprojectid", Err: err})
		return
	}

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV2ClustersNameKubeconfigs(w, r, name, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutV2ClustersNameLabels operation middleware
func (siw *ServerInterfaceWrapper) PutV2ClustersNameLabels(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", r.PathValue("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HTTPScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params PutV2ClustersNameLabelsParams

	headers := r.Header

	// ------------- Required header parameter "Activeprojectid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Activeprojectid")]; found {
		var Activeprojectid ActiveProjectIdHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Activeprojectid", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Activeprojectid", valueList[0], &Activeprojectid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Activeprojectid", Err: err})
			return
		}

		params.Activeprojectid = Activeprojectid

	} else {
		err := fmt.Errorf("Header parameter Activeprojectid is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Activeprojectid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutV2ClustersNameLabels(w, r, name, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutV2ClustersNameNodes operation middleware
func (siw *ServerInterfaceWrapper) PutV2ClustersNameNodes(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", r.PathValue("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HTTPScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params PutV2ClustersNameNodesParams

	headers := r.Header

	// ------------- Required header parameter "Activeprojectid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Activeprojectid")]; found {
		var Activeprojectid ActiveProjectIdHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Activeprojectid", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Activeprojectid", valueList[0], &Activeprojectid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Activeprojectid", Err: err})
			return
		}

		params.Activeprojectid = Activeprojectid

	} else {
		err := fmt.Errorf("Header parameter Activeprojectid is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Activeprojectid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutV2ClustersNameNodes(w, r, name, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteV2ClustersNameNodesNodeId operation middleware
func (siw *ServerInterfaceWrapper) DeleteV2ClustersNameNodesNodeId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", r.PathValue("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "nodeId" -------------
	var nodeId string

	err = runtime.BindStyledParameterWithOptions("simple", "nodeId", r.PathValue("nodeId"), &nodeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nodeId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HTTPScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteV2ClustersNameNodesNodeIdParams

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", r.URL.Query(), &params.Force)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "force", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "Activeprojectid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Activeprojectid")]; found {
		var Activeprojectid ActiveProjectIdHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Activeprojectid", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Activeprojectid", valueList[0], &Activeprojectid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Activeprojectid", Err: err})
			return
		}

		params.Activeprojectid = Activeprojectid

	} else {
		err := fmt.Errorf("Header parameter Activeprojectid is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Activeprojectid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteV2ClustersNameNodesNodeId(w, r, name, nodeId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutV2ClustersNameTemplate operation middleware
func (siw *ServerInterfaceWrapper) PutV2ClustersNameTemplate(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", r.PathValue("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HTTPScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params PutV2ClustersNameTemplateParams

	headers := r.Header

	// ------------- Required header parameter "Activeprojectid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Activeprojectid")]; found {
		var Activeprojectid ActiveProjectIdHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Activeprojectid", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Activeprojectid", valueList[0], &Activeprojectid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Activeprojectid", Err: err})
			return
		}

		params.Activeprojectid = Activeprojectid

	} else {
		err := fmt.Errorf("Header parameter Activeprojectid is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Activeprojectid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutV2ClustersNameTemplate(w, r, name, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetV2ClustersNodeIdClusterdetail operation middleware
func (siw *ServerInterfaceWrapper) GetV2ClustersNodeIdClusterdetail(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "nodeId" -------------
	var nodeId string

	err = runtime.BindStyledParameterWithOptions("simple", "nodeId", r.PathValue("nodeId"), &nodeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nodeId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HTTPScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV2ClustersNodeIdClusterdetailParams

	headers := r.Header

	// ------------- Required header parameter "Activeprojectid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Activeprojectid")]; found {
		var Activeprojectid ActiveProjectIdHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Activeprojectid", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Activeprojectid", valueList[0], &Activeprojectid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Activeprojectid", Err: err})
			return
		}

		params.Activeprojectid = Activeprojectid

	} else {
		err := fmt.Errorf("Header parameter Activeprojectid is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Activeprojectid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV2ClustersNodeIdClusterdetail(w, r, nodeId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetV2Healthz operation middleware
func (siw *ServerInterfaceWrapper) GetV2Healthz(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV2Healthz(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetV2Templates operation middleware
func (siw *ServerInterfaceWrapper) GetV2Templates(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, HTTPScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV2TemplatesParams

	// ------------- Optional query parameter "default" -------------

	err = runtime.BindQueryParameter("form", true, false, "default", r.URL.Query(), &params.Default)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "default", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "Activeprojectid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Activeprojectid")]; found {
		var Activeprojectid ActiveProjectIdHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Activeprojectid", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Activeprojectid", valueList[0], &Activeprojectid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Activeprojectid", Err: err})
			return
		}

		params.Activeprojectid = Activeprojectid

	} else {
		err := fmt.Errorf("Header parameter Activeprojectid is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Activeprojectid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV2Templates(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostV2Templates operation middleware
func (siw *ServerInterfaceWrapper) PostV2Templates(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, HTTPScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params PostV2TemplatesParams

	headers := r.Header

	// ------------- Required header parameter "Activeprojectid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Activeprojectid")]; found {
		var Activeprojectid ActiveProjectIdHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Activeprojectid", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Activeprojectid", valueList[0], &Activeprojectid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Activeprojectid", Err: err})
			return
		}

		params.Activeprojectid = Activeprojectid

	} else {
		err := fmt.Errorf("Header parameter Activeprojectid is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Activeprojectid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostV2Templates(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutV2TemplatesNameDefault operation middleware
func (siw *ServerInterfaceWrapper) PutV2TemplatesNameDefault(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", r.PathValue("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HTTPScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params PutV2TemplatesNameDefaultParams

	headers := r.Header

	// ------------- Required header parameter "Activeprojectid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Activeprojectid")]; found {
		var Activeprojectid ActiveProjectIdHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Activeprojectid", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Activeprojectid", valueList[0], &Activeprojectid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Activeprojectid", Err: err})
			return
		}

		params.Activeprojectid = Activeprojectid

	} else {
		err := fmt.Errorf("Header parameter Activeprojectid is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Activeprojectid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutV2TemplatesNameDefault(w, r, name, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetV2TemplatesNameVersions operation middleware
func (siw *ServerInterfaceWrapper) GetV2TemplatesNameVersions(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", r.PathValue("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HTTPScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV2TemplatesNameVersionsParams

	headers := r.Header

	// ------------- Required header parameter "Activeprojectid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Activeprojectid")]; found {
		var Activeprojectid ActiveProjectIdHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Activeprojectid", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Activeprojectid", valueList[0], &Activeprojectid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Activeprojectid", Err: err})
			return
		}

		params.Activeprojectid = Activeprojectid

	} else {
		err := fmt.Errorf("Header parameter Activeprojectid is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Activeprojectid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV2TemplatesNameVersions(w, r, name, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteV2TemplatesNameVersion operation middleware
func (siw *ServerInterfaceWrapper) DeleteV2TemplatesNameVersion(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", r.PathValue("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithOptions("simple", "version", r.PathValue("version"), &version, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "version", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HTTPScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteV2TemplatesNameVersionParams

	headers := r.Header

	// ------------- Required header parameter "Activeprojectid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Activeprojectid")]; found {
		var Activeprojectid ActiveProjectIdHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Activeprojectid", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Activeprojectid", valueList[0], &Activeprojectid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Activeprojectid", Err: err})
			return
		}

		params.Activeprojectid = Activeprojectid

	} else {
		err := fmt.Errorf("Header parameter Activeprojectid is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Activeprojectid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteV2TemplatesNameVersion(w, r, name, version, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetV2TemplatesNameVersion operation middleware
func (siw *ServerInterfaceWrapper) GetV2TemplatesNameVersion(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", r.PathValue("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithOptions("simple", "version", r.PathValue("version"), &version, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "version", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HTTPScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV2TemplatesNameVersionParams

	headers := r.Header

	// ------------- Required header parameter "Activeprojectid" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Activeprojectid")]; found {
		var Activeprojectid ActiveProjectIdHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Activeprojectid", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Activeprojectid", valueList[0], &Activeprojectid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Activeprojectid", Err: err})
			return
		}

		params.Activeprojectid = Activeprojectid

	} else {
		err := fmt.Errorf("Header parameter Activeprojectid is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Activeprojectid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV2TemplatesNameVersion(w, r, name, version, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/v2/clusters", wrapper.GetV2Clusters)
	m.HandleFunc("POST "+options.BaseURL+"/v2/clusters", wrapper.PostV2Clusters)
	m.HandleFunc("GET "+options.BaseURL+"/v2/clusters/summary", wrapper.GetV2ClustersSummary)
	m.HandleFunc("DELETE "+options.BaseURL+"/v2/clusters/{name}", wrapper.DeleteV2ClustersName)
	m.HandleFunc("GET "+options.BaseURL+"/v2/clusters/{name}", wrapper.GetV2ClustersName)
	m.HandleFunc("GET "+options.BaseURL+"/v2/clusters/{name}/kubeconfigs", wrapper.GetV2ClustersNameKubeconfigs)
	m.HandleFunc("PUT "+options.BaseURL+"/v2/clusters/{name}/labels", wrapper.PutV2ClustersNameLabels)
	m.HandleFunc("PUT "+options.BaseURL+"/v2/clusters/{name}/nodes", wrapper.PutV2ClustersNameNodes)
	m.HandleFunc("DELETE "+options.BaseURL+"/v2/clusters/{name}/nodes/{nodeId}", wrapper.DeleteV2ClustersNameNodesNodeId)
	m.HandleFunc("PUT "+options.BaseURL+"/v2/clusters/{name}/template", wrapper.PutV2ClustersNameTemplate)
	m.HandleFunc("GET "+options.BaseURL+"/v2/clusters/{nodeId}/clusterdetail", wrapper.GetV2ClustersNodeIdClusterdetail)
	m.HandleFunc("GET "+options.BaseURL+"/v2/healthz", wrapper.GetV2Healthz)
	m.HandleFunc("GET "+options.BaseURL+"/v2/templates", wrapper.GetV2Templates)
	m.HandleFunc("POST "+options.BaseURL+"/v2/templates", wrapper.PostV2Templates)
	m.HandleFunc("PUT "+options.BaseURL+"/v2/templates/{name}/default", wrapper.PutV2TemplatesNameDefault)
	m.HandleFunc("GET "+options.BaseURL+"/v2/templates/{name}/versions", wrapper.GetV2TemplatesNameVersions)
	m.HandleFunc("DELETE "+options.BaseURL+"/v2/templates/{name}/{version}", wrapper.DeleteV2TemplatesNameVersion)
	m.HandleFunc("GET "+options.BaseURL+"/v2/templates/{name}/{version}", wrapper.GetV2TemplatesNameVersion)

	return m
}

type N400BadRequestJSONResponse ProblemDetails

type N401UnauthorizedJSONResponse ProblemDetails

type N404NotFoundJSONResponse ProblemDetails

type N409ConflictJSONResponse ProblemDetails

type N500InternalServerErrorJSONResponse ProblemDetails

type N501NotImplementedJSONResponse ProblemDetails

type GetV2ClustersRequestObject struct {
	Params GetV2ClustersParams
}

type GetV2ClustersResponseObject interface {
	VisitGetV2ClustersResponse(w http.ResponseWriter) error
}

type GetV2Clusters200JSONResponse struct {
	Clusters *[]ClusterInfo `json:"clusters,omitempty"`

	// TotalElements The count of items in the entire list, regardless of pagination.
	TotalElements int32 `json:"totalElements"`
}

func (response GetV2Clusters200JSONResponse) VisitGetV2ClustersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetV2Clusters400JSONResponse struct{ N400BadRequestJSONResponse }

func (response GetV2Clusters400JSONResponse) VisitGetV2ClustersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetV2Clusters500JSONResponse struct {
	N500InternalServerErrorJSONResponse
}

func (response GetV2Clusters500JSONResponse) VisitGetV2ClustersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostV2ClustersRequestObject struct {
	Params PostV2ClustersParams
	Body   *PostV2ClustersJSONRequestBody
}

type PostV2ClustersResponseObject interface {
	VisitPostV2ClustersResponse(w http.ResponseWriter) error
}

type PostV2Clusters201JSONResponse string

func (response PostV2Clusters201JSONResponse) VisitPostV2ClustersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostV2Clusters400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PostV2Clusters400JSONResponse) VisitPostV2ClustersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostV2Clusters500JSONResponse struct {
	N500InternalServerErrorJSONResponse
}

func (response PostV2Clusters500JSONResponse) VisitPostV2ClustersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetV2ClustersSummaryRequestObject struct {
	Params GetV2ClustersSummaryParams
}

type GetV2ClustersSummaryResponseObject interface {
	VisitGetV2ClustersSummaryResponse(w http.ResponseWriter) error
}

type GetV2ClustersSummary200JSONResponse ClusterSummary

func (response GetV2ClustersSummary200JSONResponse) VisitGetV2ClustersSummaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetV2ClustersSummary400JSONResponse struct{ N400BadRequestJSONResponse }

func (response GetV2ClustersSummary400JSONResponse) VisitGetV2ClustersSummaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetV2ClustersSummary500JSONResponse struct {
	N500InternalServerErrorJSONResponse
}

func (response GetV2ClustersSummary500JSONResponse) VisitGetV2ClustersSummaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteV2ClustersNameRequestObject struct {
	Name   string `json:"name"`
	Params DeleteV2ClustersNameParams
}

type DeleteV2ClustersNameResponseObject interface {
	VisitDeleteV2ClustersNameResponse(w http.ResponseWriter) error
}

type DeleteV2ClustersName204Response struct {
}

func (response DeleteV2ClustersName204Response) VisitDeleteV2ClustersNameResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteV2ClustersName400JSONResponse struct{ N400BadRequestJSONResponse }

func (response DeleteV2ClustersName400JSONResponse) VisitDeleteV2ClustersNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteV2ClustersName404JSONResponse struct{ N404NotFoundJSONResponse }

func (response DeleteV2ClustersName404JSONResponse) VisitDeleteV2ClustersNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteV2ClustersName500JSONResponse struct {
	N500InternalServerErrorJSONResponse
}

func (response DeleteV2ClustersName500JSONResponse) VisitDeleteV2ClustersNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetV2ClustersNameRequestObject struct {
	Name   string `json:"name"`
	Params GetV2ClustersNameParams
}

type GetV2ClustersNameResponseObject interface {
	VisitGetV2ClustersNameResponse(w http.ResponseWriter) error
}

type GetV2ClustersName200JSONResponse ClusterDetailInfo

func (response GetV2ClustersName200JSONResponse) VisitGetV2ClustersNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetV2ClustersName400JSONResponse struct{ N400BadRequestJSONResponse }

func (response GetV2ClustersName400JSONResponse) VisitGetV2ClustersNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetV2ClustersName404JSONResponse struct{ N404NotFoundJSONResponse }

func (response GetV2ClustersName404JSONResponse) VisitGetV2ClustersNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetV2ClustersName500JSONResponse struct {
	N500InternalServerErrorJSONResponse
}

func (response GetV2ClustersName500JSONResponse) VisitGetV2ClustersNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetV2ClustersNameKubeconfigsRequestObject struct {
	Name   string `json:"name"`
	Params GetV2ClustersNameKubeconfigsParams
}

type GetV2ClustersNameKubeconfigsResponseObject interface {
	VisitGetV2ClustersNameKubeconfigsResponse(w http.ResponseWriter) error
}

type GetV2ClustersNameKubeconfigs200JSONResponse KubeconfigInfo

func (response GetV2ClustersNameKubeconfigs200JSONResponse) VisitGetV2ClustersNameKubeconfigsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetV2ClustersNameKubeconfigs400JSONResponse struct{ N400BadRequestJSONResponse }

func (response GetV2ClustersNameKubeconfigs400JSONResponse) VisitGetV2ClustersNameKubeconfigsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetV2ClustersNameKubeconfigs401JSONResponse struct{ N401UnauthorizedJSONResponse }

func (response GetV2ClustersNameKubeconfigs401JSONResponse) VisitGetV2ClustersNameKubeconfigsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetV2ClustersNameKubeconfigs404JSONResponse struct{ N404NotFoundJSONResponse }

func (response GetV2ClustersNameKubeconfigs404JSONResponse) VisitGetV2ClustersNameKubeconfigsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetV2ClustersNameKubeconfigs500JSONResponse struct {
	N500InternalServerErrorJSONResponse
}

func (response GetV2ClustersNameKubeconfigs500JSONResponse) VisitGetV2ClustersNameKubeconfigsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PutV2ClustersNameLabelsRequestObject struct {
	Name   string `json:"name"`
	Params PutV2ClustersNameLabelsParams
	Body   *PutV2ClustersNameLabelsJSONRequestBody
}

type PutV2ClustersNameLabelsResponseObject interface {
	VisitPutV2ClustersNameLabelsResponse(w http.ResponseWriter) error
}

type PutV2ClustersNameLabels200Response struct {
}

func (response PutV2ClustersNameLabels200Response) VisitPutV2ClustersNameLabelsResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PutV2ClustersNameLabels400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PutV2ClustersNameLabels400JSONResponse) VisitPutV2ClustersNameLabelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutV2ClustersNameLabels404JSONResponse struct{ N404NotFoundJSONResponse }

func (response PutV2ClustersNameLabels404JSONResponse) VisitPutV2ClustersNameLabelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutV2ClustersNameLabels500JSONResponse struct {
	N500InternalServerErrorJSONResponse
}

func (response PutV2ClustersNameLabels500JSONResponse) VisitPutV2ClustersNameLabelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PutV2ClustersNameNodesRequestObject struct {
	Name   string `json:"name"`
	Params PutV2ClustersNameNodesParams
	Body   *PutV2ClustersNameNodesJSONRequestBody
}

type PutV2ClustersNameNodesResponseObject interface {
	VisitPutV2ClustersNameNodesResponse(w http.ResponseWriter) error
}

type PutV2ClustersNameNodes200Response struct {
}

func (response PutV2ClustersNameNodes200Response) VisitPutV2ClustersNameNodesResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PutV2ClustersNameNodes400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PutV2ClustersNameNodes400JSONResponse) VisitPutV2ClustersNameNodesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutV2ClustersNameNodes404JSONResponse struct{ N404NotFoundJSONResponse }

func (response PutV2ClustersNameNodes404JSONResponse) VisitPutV2ClustersNameNodesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutV2ClustersNameNodes500JSONResponse struct {
	N500InternalServerErrorJSONResponse
}

func (response PutV2ClustersNameNodes500JSONResponse) VisitPutV2ClustersNameNodesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteV2ClustersNameNodesNodeIdRequestObject struct {
	Name   string `json:"name"`
	NodeId string `json:"nodeId"`
	Params DeleteV2ClustersNameNodesNodeIdParams
}

type DeleteV2ClustersNameNodesNodeIdResponseObject interface {
	VisitDeleteV2ClustersNameNodesNodeIdResponse(w http.ResponseWriter) error
}

type DeleteV2ClustersNameNodesNodeId200Response struct {
}

func (response DeleteV2ClustersNameNodesNodeId200Response) VisitDeleteV2ClustersNameNodesNodeIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteV2ClustersNameNodesNodeId400JSONResponse struct{ N400BadRequestJSONResponse }

func (response DeleteV2ClustersNameNodesNodeId400JSONResponse) VisitDeleteV2ClustersNameNodesNodeIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteV2ClustersNameNodesNodeId404JSONResponse struct{ N404NotFoundJSONResponse }

func (response DeleteV2ClustersNameNodesNodeId404JSONResponse) VisitDeleteV2ClustersNameNodesNodeIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteV2ClustersNameNodesNodeId500JSONResponse struct {
	N500InternalServerErrorJSONResponse
}

func (response DeleteV2ClustersNameNodesNodeId500JSONResponse) VisitDeleteV2ClustersNameNodesNodeIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PutV2ClustersNameTemplateRequestObject struct {
	Name   string `json:"name"`
	Params PutV2ClustersNameTemplateParams
	Body   *PutV2ClustersNameTemplateJSONRequestBody
}

type PutV2ClustersNameTemplateResponseObject interface {
	VisitPutV2ClustersNameTemplateResponse(w http.ResponseWriter) error
}

type PutV2ClustersNameTemplate202Response struct {
}

func (response PutV2ClustersNameTemplate202Response) VisitPutV2ClustersNameTemplateResponse(w http.ResponseWriter) error {
	w.WriteHeader(202)
	return nil
}

type PutV2ClustersNameTemplate400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PutV2ClustersNameTemplate400JSONResponse) VisitPutV2ClustersNameTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutV2ClustersNameTemplate404JSONResponse struct{ N404NotFoundJSONResponse }

func (response PutV2ClustersNameTemplate404JSONResponse) VisitPutV2ClustersNameTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutV2ClustersNameTemplate500JSONResponse struct {
	N500InternalServerErrorJSONResponse
}

func (response PutV2ClustersNameTemplate500JSONResponse) VisitPutV2ClustersNameTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PutV2ClustersNameTemplate501JSONResponse struct{ N501NotImplementedJSONResponse }

func (response PutV2ClustersNameTemplate501JSONResponse) VisitPutV2ClustersNameTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(501)

	return json.NewEncoder(w).Encode(response)
}

type GetV2ClustersNodeIdClusterdetailRequestObject struct {
	NodeId string `json:"nodeId"`
	Params GetV2ClustersNodeIdClusterdetailParams
}

type GetV2ClustersNodeIdClusterdetailResponseObject interface {
	VisitGetV2ClustersNodeIdClusterdetailResponse(w http.ResponseWriter) error
}

type GetV2ClustersNodeIdClusterdetail200JSONResponse ClusterDetailInfo

func (response GetV2ClustersNodeIdClusterdetail200JSONResponse) VisitGetV2ClustersNodeIdClusterdetailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetV2ClustersNodeIdClusterdetail400JSONResponse struct{ N400BadRequestJSONResponse }

func (response GetV2ClustersNodeIdClusterdetail400JSONResponse) VisitGetV2ClustersNodeIdClusterdetailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetV2ClustersNodeIdClusterdetail404JSONResponse struct{ N404NotFoundJSONResponse }

func (response GetV2ClustersNodeIdClusterdetail404JSONResponse) VisitGetV2ClustersNodeIdClusterdetailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetV2HealthzRequestObject struct {
}

type GetV2HealthzResponseObject interface {
	VisitGetV2HealthzResponse(w http.ResponseWriter) error
}

type GetV2Healthz200JSONResponse string

func (response GetV2Healthz200JSONResponse) VisitGetV2HealthzResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetV2Healthz500JSONResponse struct {
	N500InternalServerErrorJSONResponse
}

func (response GetV2Healthz500JSONResponse) VisitGetV2HealthzResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetV2TemplatesRequestObject struct {
	Params GetV2TemplatesParams
}

type GetV2TemplatesResponseObject interface {
	VisitGetV2TemplatesResponse(w http.ResponseWriter) error
}

type GetV2Templates200JSONResponse TemplateInfoList

func (response GetV2Templates200JSONResponse) VisitGetV2TemplatesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetV2Templates400JSONResponse struct{ N400BadRequestJSONResponse }

func (response GetV2Templates400JSONResponse) VisitGetV2TemplatesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetV2Templates404JSONResponse struct{ N404NotFoundJSONResponse }

func (response GetV2Templates404JSONResponse) VisitGetV2TemplatesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetV2Templates500JSONResponse struct {
	N500InternalServerErrorJSONResponse
}

func (response GetV2Templates500JSONResponse) VisitGetV2TemplatesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostV2TemplatesRequestObject struct {
	Params PostV2TemplatesParams
	Body   *PostV2TemplatesJSONRequestBody
}

type PostV2TemplatesResponseObject interface {
	VisitPostV2TemplatesResponse(w http.ResponseWriter) error
}

type PostV2Templates201JSONResponse string

func (response PostV2Templates201JSONResponse) VisitPostV2TemplatesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostV2Templates400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PostV2Templates400JSONResponse) VisitPostV2TemplatesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostV2Templates409JSONResponse struct{ N409ConflictJSONResponse }

func (response PostV2Templates409JSONResponse) VisitPostV2TemplatesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PostV2Templates500JSONResponse struct {
	N500InternalServerErrorJSONResponse
}

func (response PostV2Templates500JSONResponse) VisitPostV2TemplatesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PutV2TemplatesNameDefaultRequestObject struct {
	Name   string `json:"name"`
	Params PutV2TemplatesNameDefaultParams
	Body   *PutV2TemplatesNameDefaultJSONRequestBody
}

type PutV2TemplatesNameDefaultResponseObject interface {
	VisitPutV2TemplatesNameDefaultResponse(w http.ResponseWriter) error
}

type PutV2TemplatesNameDefault200Response struct {
}

func (response PutV2TemplatesNameDefault200Response) VisitPutV2TemplatesNameDefaultResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PutV2TemplatesNameDefault400JSONResponse struct{ N400BadRequestJSONResponse }

func (response PutV2TemplatesNameDefault400JSONResponse) VisitPutV2TemplatesNameDefaultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutV2TemplatesNameDefault404JSONResponse struct{ N404NotFoundJSONResponse }

func (response PutV2TemplatesNameDefault404JSONResponse) VisitPutV2TemplatesNameDefaultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutV2TemplatesNameDefault500JSONResponse struct {
	N500InternalServerErrorJSONResponse
}

func (response PutV2TemplatesNameDefault500JSONResponse) VisitPutV2TemplatesNameDefaultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetV2TemplatesNameVersionsRequestObject struct {
	Name   string `json:"name"`
	Params GetV2TemplatesNameVersionsParams
}

type GetV2TemplatesNameVersionsResponseObject interface {
	VisitGetV2TemplatesNameVersionsResponse(w http.ResponseWriter) error
}

type GetV2TemplatesNameVersions200JSONResponse VersionList

func (response GetV2TemplatesNameVersions200JSONResponse) VisitGetV2TemplatesNameVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetV2TemplatesNameVersions400JSONResponse struct{ N400BadRequestJSONResponse }

func (response GetV2TemplatesNameVersions400JSONResponse) VisitGetV2TemplatesNameVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetV2TemplatesNameVersions404JSONResponse struct{ N404NotFoundJSONResponse }

func (response GetV2TemplatesNameVersions404JSONResponse) VisitGetV2TemplatesNameVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetV2TemplatesNameVersions500JSONResponse struct {
	N500InternalServerErrorJSONResponse
}

func (response GetV2TemplatesNameVersions500JSONResponse) VisitGetV2TemplatesNameVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteV2TemplatesNameVersionRequestObject struct {
	Name    string `json:"name"`
	Version string `json:"version"`
	Params  DeleteV2TemplatesNameVersionParams
}

type DeleteV2TemplatesNameVersionResponseObject interface {
	VisitDeleteV2TemplatesNameVersionResponse(w http.ResponseWriter) error
}

type DeleteV2TemplatesNameVersion204Response struct {
}

func (response DeleteV2TemplatesNameVersion204Response) VisitDeleteV2TemplatesNameVersionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteV2TemplatesNameVersion400JSONResponse struct{ N400BadRequestJSONResponse }

func (response DeleteV2TemplatesNameVersion400JSONResponse) VisitDeleteV2TemplatesNameVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteV2TemplatesNameVersion404JSONResponse struct{ N404NotFoundJSONResponse }

func (response DeleteV2TemplatesNameVersion404JSONResponse) VisitDeleteV2TemplatesNameVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteV2TemplatesNameVersion500JSONResponse struct {
	N500InternalServerErrorJSONResponse
}

func (response DeleteV2TemplatesNameVersion500JSONResponse) VisitDeleteV2TemplatesNameVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetV2TemplatesNameVersionRequestObject struct {
	Name    string `json:"name"`
	Version string `json:"version"`
	Params  GetV2TemplatesNameVersionParams
}

type GetV2TemplatesNameVersionResponseObject interface {
	VisitGetV2TemplatesNameVersionResponse(w http.ResponseWriter) error
}

type GetV2TemplatesNameVersion200JSONResponse TemplateInfo

func (response GetV2TemplatesNameVersion200JSONResponse) VisitGetV2TemplatesNameVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetV2TemplatesNameVersion400JSONResponse struct{ N400BadRequestJSONResponse }

func (response GetV2TemplatesNameVersion400JSONResponse) VisitGetV2TemplatesNameVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetV2TemplatesNameVersion404JSONResponse struct{ N404NotFoundJSONResponse }

func (response GetV2TemplatesNameVersion404JSONResponse) VisitGetV2TemplatesNameVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetV2TemplatesNameVersion500JSONResponse struct {
	N500InternalServerErrorJSONResponse
}

func (response GetV2TemplatesNameVersion500JSONResponse) VisitGetV2TemplatesNameVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /v2/clusters)
	GetV2Clusters(ctx context.Context, request GetV2ClustersRequestObject) (GetV2ClustersResponseObject, error)

	// (POST /v2/clusters)
	PostV2Clusters(ctx context.Context, request PostV2ClustersRequestObject) (PostV2ClustersResponseObject, error)

	// (GET /v2/clusters/summary)
	GetV2ClustersSummary(ctx context.Context, request GetV2ClustersSummaryRequestObject) (GetV2ClustersSummaryResponseObject, error)

	// (DELETE /v2/clusters/{name})
	DeleteV2ClustersName(ctx context.Context, request DeleteV2ClustersNameRequestObject) (DeleteV2ClustersNameResponseObject, error)

	// (GET /v2/clusters/{name})
	GetV2ClustersName(ctx context.Context, request GetV2ClustersNameRequestObject) (GetV2ClustersNameResponseObject, error)

	// (GET /v2/clusters/{name}/kubeconfigs)
	GetV2ClustersNameKubeconfigs(ctx context.Context, request GetV2ClustersNameKubeconfigsRequestObject) (GetV2ClustersNameKubeconfigsResponseObject, error)

	// (PUT /v2/clusters/{name}/labels)
	PutV2ClustersNameLabels(ctx context.Context, request PutV2ClustersNameLabelsRequestObject) (PutV2ClustersNameLabelsResponseObject, error)

	// (PUT /v2/clusters/{name}/nodes)
	PutV2ClustersNameNodes(ctx context.Context, request PutV2ClustersNameNodesRequestObject) (PutV2ClustersNameNodesResponseObject, error)

	// (DELETE /v2/clusters/{name}/nodes/{nodeId})
	DeleteV2ClustersNameNodesNodeId(ctx context.Context, request DeleteV2ClustersNameNodesNodeIdRequestObject) (DeleteV2ClustersNameNodesNodeIdResponseObject, error)

	// (PUT /v2/clusters/{name}/template)
	PutV2ClustersNameTemplate(ctx context.Context, request PutV2ClustersNameTemplateRequestObject) (PutV2ClustersNameTemplateResponseObject, error)

	// (GET /v2/clusters/{nodeId}/clusterdetail)
	GetV2ClustersNodeIdClusterdetail(ctx context.Context, request GetV2ClustersNodeIdClusterdetailRequestObject) (GetV2ClustersNodeIdClusterdetailResponseObject, error)

	// (GET /v2/healthz)
	GetV2Healthz(ctx context.Context, request GetV2HealthzRequestObject) (GetV2HealthzResponseObject, error)

	// (GET /v2/templates)
	GetV2Templates(ctx context.Context, request GetV2TemplatesRequestObject) (GetV2TemplatesResponseObject, error)

	// (POST /v2/templates)
	PostV2Templates(ctx context.Context, request PostV2TemplatesRequestObject) (PostV2TemplatesResponseObject, error)

	// (PUT /v2/templates/{name}/default)
	PutV2TemplatesNameDefault(ctx context.Context, request PutV2TemplatesNameDefaultRequestObject) (PutV2TemplatesNameDefaultResponseObject, error)

	// (GET /v2/templates/{name}/versions)
	GetV2TemplatesNameVersions(ctx context.Context, request GetV2TemplatesNameVersionsRequestObject) (GetV2TemplatesNameVersionsResponseObject, error)

	// (DELETE /v2/templates/{name}/{version})
	DeleteV2TemplatesNameVersion(ctx context.Context, request DeleteV2TemplatesNameVersionRequestObject) (DeleteV2TemplatesNameVersionResponseObject, error)

	// (GET /v2/templates/{name}/{version})
	GetV2TemplatesNameVersion(ctx context.Context, request GetV2TemplatesNameVersionRequestObject) (GetV2TemplatesNameVersionResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetV2Clusters operation middleware
func (sh *strictHandler) GetV2Clusters(w http.ResponseWriter, r *http.Request, params GetV2ClustersParams) {
	var request GetV2ClustersRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetV2Clusters(ctx, request.(GetV2ClustersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetV2Clusters")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetV2ClustersResponseObject); ok {
		if err := validResponse.VisitGetV2ClustersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostV2Clusters operation middleware
func (sh *strictHandler) PostV2Clusters(w http.ResponseWriter, r *http.Request, params PostV2ClustersParams) {
	var request PostV2ClustersRequestObject

	request.Params = params

	var body PostV2ClustersJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostV2Clusters(ctx, request.(PostV2ClustersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostV2Clusters")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostV2ClustersResponseObject); ok {
		if err := validResponse.VisitPostV2ClustersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetV2ClustersSummary operation middleware
func (sh *strictHandler) GetV2ClustersSummary(w http.ResponseWriter, r *http.Request, params GetV2ClustersSummaryParams) {
	var request GetV2ClustersSummaryRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetV2ClustersSummary(ctx, request.(GetV2ClustersSummaryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetV2ClustersSummary")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetV2ClustersSummaryResponseObject); ok {
		if err := validResponse.VisitGetV2ClustersSummaryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteV2ClustersName operation middleware
func (sh *strictHandler) DeleteV2ClustersName(w http.ResponseWriter, r *http.Request, name string, params DeleteV2ClustersNameParams) {
	var request DeleteV2ClustersNameRequestObject

	request.Name = name
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteV2ClustersName(ctx, request.(DeleteV2ClustersNameRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteV2ClustersName")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteV2ClustersNameResponseObject); ok {
		if err := validResponse.VisitDeleteV2ClustersNameResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetV2ClustersName operation middleware
func (sh *strictHandler) GetV2ClustersName(w http.ResponseWriter, r *http.Request, name string, params GetV2ClustersNameParams) {
	var request GetV2ClustersNameRequestObject

	request.Name = name
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetV2ClustersName(ctx, request.(GetV2ClustersNameRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetV2ClustersName")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetV2ClustersNameResponseObject); ok {
		if err := validResponse.VisitGetV2ClustersNameResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetV2ClustersNameKubeconfigs operation middleware
func (sh *strictHandler) GetV2ClustersNameKubeconfigs(w http.ResponseWriter, r *http.Request, name string, params GetV2ClustersNameKubeconfigsParams) {
	var request GetV2ClustersNameKubeconfigsRequestObject

	request.Name = name
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetV2ClustersNameKubeconfigs(ctx, request.(GetV2ClustersNameKubeconfigsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetV2ClustersNameKubeconfigs")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetV2ClustersNameKubeconfigsResponseObject); ok {
		if err := validResponse.VisitGetV2ClustersNameKubeconfigsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutV2ClustersNameLabels operation middleware
func (sh *strictHandler) PutV2ClustersNameLabels(w http.ResponseWriter, r *http.Request, name string, params PutV2ClustersNameLabelsParams) {
	var request PutV2ClustersNameLabelsRequestObject

	request.Name = name
	request.Params = params

	var body PutV2ClustersNameLabelsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutV2ClustersNameLabels(ctx, request.(PutV2ClustersNameLabelsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutV2ClustersNameLabels")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutV2ClustersNameLabelsResponseObject); ok {
		if err := validResponse.VisitPutV2ClustersNameLabelsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutV2ClustersNameNodes operation middleware
func (sh *strictHandler) PutV2ClustersNameNodes(w http.ResponseWriter, r *http.Request, name string, params PutV2ClustersNameNodesParams) {
	var request PutV2ClustersNameNodesRequestObject

	request.Name = name
	request.Params = params

	var body PutV2ClustersNameNodesJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutV2ClustersNameNodes(ctx, request.(PutV2ClustersNameNodesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutV2ClustersNameNodes")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutV2ClustersNameNodesResponseObject); ok {
		if err := validResponse.VisitPutV2ClustersNameNodesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteV2ClustersNameNodesNodeId operation middleware
func (sh *strictHandler) DeleteV2ClustersNameNodesNodeId(w http.ResponseWriter, r *http.Request, name string, nodeId string, params DeleteV2ClustersNameNodesNodeIdParams) {
	var request DeleteV2ClustersNameNodesNodeIdRequestObject

	request.Name = name
	request.NodeId = nodeId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteV2ClustersNameNodesNodeId(ctx, request.(DeleteV2ClustersNameNodesNodeIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteV2ClustersNameNodesNodeId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteV2ClustersNameNodesNodeIdResponseObject); ok {
		if err := validResponse.VisitDeleteV2ClustersNameNodesNodeIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutV2ClustersNameTemplate operation middleware
func (sh *strictHandler) PutV2ClustersNameTemplate(w http.ResponseWriter, r *http.Request, name string, params PutV2ClustersNameTemplateParams) {
	var request PutV2ClustersNameTemplateRequestObject

	request.Name = name
	request.Params = params

	var body PutV2ClustersNameTemplateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutV2ClustersNameTemplate(ctx, request.(PutV2ClustersNameTemplateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutV2ClustersNameTemplate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutV2ClustersNameTemplateResponseObject); ok {
		if err := validResponse.VisitPutV2ClustersNameTemplateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetV2ClustersNodeIdClusterdetail operation middleware
func (sh *strictHandler) GetV2ClustersNodeIdClusterdetail(w http.ResponseWriter, r *http.Request, nodeId string, params GetV2ClustersNodeIdClusterdetailParams) {
	var request GetV2ClustersNodeIdClusterdetailRequestObject

	request.NodeId = nodeId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetV2ClustersNodeIdClusterdetail(ctx, request.(GetV2ClustersNodeIdClusterdetailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetV2ClustersNodeIdClusterdetail")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetV2ClustersNodeIdClusterdetailResponseObject); ok {
		if err := validResponse.VisitGetV2ClustersNodeIdClusterdetailResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetV2Healthz operation middleware
func (sh *strictHandler) GetV2Healthz(w http.ResponseWriter, r *http.Request) {
	var request GetV2HealthzRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetV2Healthz(ctx, request.(GetV2HealthzRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetV2Healthz")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetV2HealthzResponseObject); ok {
		if err := validResponse.VisitGetV2HealthzResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetV2Templates operation middleware
func (sh *strictHandler) GetV2Templates(w http.ResponseWriter, r *http.Request, params GetV2TemplatesParams) {
	var request GetV2TemplatesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetV2Templates(ctx, request.(GetV2TemplatesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetV2Templates")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetV2TemplatesResponseObject); ok {
		if err := validResponse.VisitGetV2TemplatesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostV2Templates operation middleware
func (sh *strictHandler) PostV2Templates(w http.ResponseWriter, r *http.Request, params PostV2TemplatesParams) {
	var request PostV2TemplatesRequestObject

	request.Params = params

	var body PostV2TemplatesJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostV2Templates(ctx, request.(PostV2TemplatesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostV2Templates")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostV2TemplatesResponseObject); ok {
		if err := validResponse.VisitPostV2TemplatesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutV2TemplatesNameDefault operation middleware
func (sh *strictHandler) PutV2TemplatesNameDefault(w http.ResponseWriter, r *http.Request, name string, params PutV2TemplatesNameDefaultParams) {
	var request PutV2TemplatesNameDefaultRequestObject

	request.Name = name
	request.Params = params

	var body PutV2TemplatesNameDefaultJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutV2TemplatesNameDefault(ctx, request.(PutV2TemplatesNameDefaultRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutV2TemplatesNameDefault")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutV2TemplatesNameDefaultResponseObject); ok {
		if err := validResponse.VisitPutV2TemplatesNameDefaultResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetV2TemplatesNameVersions operation middleware
func (sh *strictHandler) GetV2TemplatesNameVersions(w http.ResponseWriter, r *http.Request, name string, params GetV2TemplatesNameVersionsParams) {
	var request GetV2TemplatesNameVersionsRequestObject

	request.Name = name
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetV2TemplatesNameVersions(ctx, request.(GetV2TemplatesNameVersionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetV2TemplatesNameVersions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetV2TemplatesNameVersionsResponseObject); ok {
		if err := validResponse.VisitGetV2TemplatesNameVersionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteV2TemplatesNameVersion operation middleware
func (sh *strictHandler) DeleteV2TemplatesNameVersion(w http.ResponseWriter, r *http.Request, name string, version string, params DeleteV2TemplatesNameVersionParams) {
	var request DeleteV2TemplatesNameVersionRequestObject

	request.Name = name
	request.Version = version
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteV2TemplatesNameVersion(ctx, request.(DeleteV2TemplatesNameVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteV2TemplatesNameVersion")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteV2TemplatesNameVersionResponseObject); ok {
		if err := validResponse.VisitDeleteV2TemplatesNameVersionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetV2TemplatesNameVersion operation middleware
func (sh *strictHandler) GetV2TemplatesNameVersion(w http.ResponseWriter, r *http.Request, name string, version string, params GetV2TemplatesNameVersionParams) {
	var request GetV2TemplatesNameVersionRequestObject

	request.Name = name
	request.Version = version
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetV2TemplatesNameVersion(ctx, request.(GetV2TemplatesNameVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetV2TemplatesNameVersion")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetV2TemplatesNameVersionResponseObject); ok {
		if err := validResponse.VisitGetV2TemplatesNameVersionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
