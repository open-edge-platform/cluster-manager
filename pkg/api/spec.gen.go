// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"nL5Mu9P/DwAA//+Lw1AXBmsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
