// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+w9+1fbOLP/iq53zyl048Qxgbbcw+GyQNt87QIX0u3dD/JxFHuSaHEkrySHZtn87/dI",
	"8jOx8yiP7bb9hcbWa2Y0L82M3DvLY6OQUaBSWLt3Vog5HoEErp8OPEnGcMbZ7+DJtv8WsA9cNcAnPAoD",
	"sHatne1tvPPylWu33JeO3fK2XtivXvSa9lazudPEntN79QqsmkWotWsNzfiaRfFIjTXTh2Z64ls1i8Mf",
	"EeHgW7uSR1CzhDeEEVYr9hkfYWntWlGke8pJqKYQkhM6sKbTqRosQkYFaNBbjmP/jP1z+CMCIdUbj1EJ",
	"VP/EYRgQD0vCaON3wah6ly31I4e+tWv90MhI0zCtonHGWS+A0RFITAJh1vVBeJyEajZr1zrtKWwQoSjE",
	"k4BhHxGBKJMo5CwEHkyQQiUKsAQfMa6bOJhHyZAcAhqBHDK/bk1rVstp2h8ojuSQcfKnIsyTIXIQySFQ",
	"GU+PCDVboH8LNCJCEDpQGBA6xgFJ4G3ZJ0y+ZhF9SlhPGOIgWMQ9UMD11fIIS03ND+ftGLRX9iGj/YB4",
	"T8kPMQcij0WBr3e7B4oXPBACfMUnCkgv4hyoREJiCYj19csEJQ3+tuPYbSqBUxxcAB8DP+ac8SfEpDPU",
	"gI+JD1xROYY5mKCI4l4Ain2HmPrql4beIO5HugUrFjLgI9CQa6Sail3aSpmMgMonZfBOBqQSxRB4yt1q",
	"m0gGVN1So+OZ1cKHQSQkcDN5m/aZ1p1awCUxCkghwVlwFmAK54D9yTKA3wAFTrwLiWUkFHEI7XMsJI88",
	"GfHPnOMm6gGnIEH8ClwQQ8AZ3VmzAtyDQOSamFZiuon0wZt4AZwNsYC11zeavmRJynx4CziQw/XnZL4h",
	"MZEwEsuGnzAf9A5NU6OBOccT9Zxwczz3uoBIGIVKcZcgmC2WkTJmmu/s8vTs8r8RppLIScF3adasEf5E",
	"RtHI2m06Ts0aEWqenHT3lMoaAL83syzgh/cpNYsckVEZ+z5RmgkHZ4UeJeoZS6VilYuhdbCeA41xEIGo",
	"I70SuoFJ0k8gzAFp6639DyxQiLnM7I/R4EapK8dthD+9BzpQu7CzVbPiaaxd6z8//vWfS2z/eWD/27Ff",
	"dbOfdbv7PNfw47zrNquWDT00ZDcwaWjgUYgJF0gOsUQUjKfkMe2RaKsjZSh2G42MfeuENXzmiYbHqAeh",
	"FA02Bj4mcNu4ZfyG0IF9S+TQNrshGobYjR/EhEr8ycbUt70h5tiTwG0B0qplfHNn+VTURdSr+2yECW3c",
	"wMR2rV1Lg2q7dTVz3WdSWDVLtTXTtqY1zwjTjBUuQvD+AYxQ/84Jj8IJmf57HOqubzg1Q5YYzrzlWwqr",
	"gmfj0o5/PU9ebe5vXF3VF3bYfF6CxzR/TLyMkepW69eLaDTCfDIvV5D4z/PiQ6NRD7hif89MEnOcYkVC",
	"jf9qfHUlC+nZlFC55VplxoPQM84GHIT4rAVDzgYgRHw82NCmSJlnQgcNHwKQhA42VwSFJ57BelDoYSsu",
	"IZnEQUz+CoR1l5IFV1whojeU3dLPImY8do39m2G5InoJRWsxQxU2O4N0AYd2Ymkq9wwTnTBz4sWj9JyY",
	"SmNONVk9LCAgFIq6etu4OcljsyCvjyCsNWucOZJFDGLkU+hR3DM5EptdUTg+G/9f/bf6v58V8Bs79Wbd",
	"mbdEldiNN5y/Lpv2q+7Vlf988+qqvvB5w/ZhvLm/gv5R25OhWbbNR9DHUSAfapvr6ETHjAwM6HYIFAmQ",
	"Sgfofr5ZrqYOsniMSaAP54SiN8cd1Bg3G8lEWtjuzTGfZYoquaIzww111O4r7JRxh1EoJ7XYn5HKIUlY",
	"5pYEAeoBioRxXmIS1FfimKLFWo9NlvPHIsYoHhLmaHGABqaDVlWRQGakwqrIO4T6xMPSWLNFNt2s1E67",
	"T2vWCITAAyhbfRiNMLWVdtMcFAMRD5hxApuO26pwVOxrxRSN3f/e2/+f//qhdhU5zpan/8LzjU3U/enH",
	"WIee0mCSRH7nOEaSEQiJR2EZpB8o+VRDHzqHKO1m5ELxSgz3LRYowEKiKNRObkHzR4TKnVY1HEVTUOyS",
	"3+2EmrXcnuRhL+OCd1EPlAtLBuWagfilR+KbdNiK8YcTkMrjPcd0ACXnTY/4/OeAeTelnBgQoXXxYfvo",
	"HPV0N6VS9JHBvKRM6viZomvqYOYYYmN/91Lpg7tmbWt6dVXfvNuaZi8aSbMSLrdrfm5dOrbb3SzVIEWX",
	"dEbocrh0FeZJDKiCtkVk3zIhc+Fkv6BEhkxIu7kNfd91vTK4OAvKQxhipbhBIqF9VrGJiVe+EiofPrSP",
	"EvOhIC8qxB3Yabmut2XvuNtgbzsvsN3zXmK757tbWw44L+AFLEIx1rJqF4JAzUyjkaK+eYojWmGAtUlR",
	"rAdcCUAqdLr/Mv1p8kJqxTLZmYnyzhGlUrsZFz4T1xXkZ1Z5lvqesbJJpb+eo8tF56Dz4eK6fXLUPjzo",
	"tE9Prj+cXJwdH7Zft4+PrFpJ+/H5+el5aUv75Prs/PTN+fHFRXn70fvjMmIv1bM5BiwLUpoAhD4+FbE6",
	"PD05asdIvTs5/XiSgZU1nR8fHP1W1nBy2qlsOzs//bV90T49aZ+8KZ/0l9NfVdty3tL4i4qwZsHCrMAP",
	"i/25+OhhL4/ePEUo5SAI2K1Q/pE6DDEkQvBIf4JwqtjnIixMOVRYSuwNTZgFJ8cp5HHQYaJbIoczrmln",
	"CCKZ4kuIzxgVZcMnCdR4nJYPI2bVHjp0E9MmNrLL1PxM72y8seiRSUUVwtV3Fg5JGpYvqNd6PLj+yb55",
	"qSk6bvZA4qaCnVDf2rXO3x27h7kcQyc7M45AYh9LnJ1CsqOAsluxtcEDoPIwdTjUDgYgDYiS4wM+EEod",
	"2LZkIQvYYGKPMMUD4HbIAuJN9nogpA39PuNqk2zbC6PZLkp7Ek+3chDAx+CrbmKvqd+N8Cc7ZL7Yc7cd",
	"/UIGwvZIOFRbHxEJYq/z/uL6+PDo7fH1+cXB9cd25+31wfHFddN9ef3m8Jfri7cH7vZOLet1fHiU9Dt8",
	"e3D49sB1rs9O3//W3HK2axWTuds7yWRbL1tlvRZNlVtxfjKrqzONOr+b0dqjRO04DoinOZcI5ZAfFio3",
	"MonKv7+0vIBFfrzzgTLA05oF0tPOQg97N1GYrqNailtZpO3luvRYiGpt9a2qGFzRe474cWNX467odBAS",
	"k0Iv4d4+YBlxsAfqhLl3xrh8zfgt5v5H6Anm3YAUe8p0frX8Z0iUccwvRkTzpLJ2aRQEcc8LZR+ioLRH",
	"/qRvjZv1Lae+8xO/AZc3y21qXqslCTfTKe9uqhlyfpWCAvvau1EN3WXWsGByW86rndkIx9xwnVuthked",
	"DvMOsK/4xEQCVUMZQKWZ1kcKZe3v2hsb+7u5d3+pP8nxXB+2kt+6u5ph5f6bzzc39/WgnzbyLT+ZiQqv",
	"dN/y3ER55uNvi1V+WVHFMn7pLnFJ3xNT9xbOpApLY5GLfJWy8GUuB5Rfa6XE0txEs8klJnFwbGpvKrIH",
	"Houo9lr1gknEGKgkHLRHW0McBpj7AQih+oV4QGganlgl4D9H25ju5WQdFxtTOuTYyHVaL5cqmrmoxgp+",
	"ZnlYnZoOqOBQ1hChXhD5hA5QyHyEqY+Us0E8yEd25iOMyutamjAsxJdiN4Z4sO7AkhS5msuLOJETZW1G",
	"Zsq3nc6Z9mIAc+Cvkz3918eOFRdraVdWt2Z7rE4gJulOYt6fZS8ikM+8SLEf8qFPKAgTR9Tgpin1hNCx",
	"fURu3UHnxxcddHDWruugn9RRlpJ+Vt4sunWn7ihysRAoDpWnt1V36luW1jNDjWpj7CZHBv08MI53EfI3",
	"IAXCQZBmvZ7lizYVSGmNW9s3/X91c2msfO3vZZnUxdUyufyaET/JEAcZcVoML+WB3g/xAC7In7DnOkk5",
	"8B8R8ElWDZz0sPJlv6mNdZ11qnWmtVn429SHT0korE+4kBr4HOyoLXXGJBgxIREObvFEmIQCoUqKfo+o",
	"J02yIT71PktAfoY0LquhfxU5jrvD+n0Bcq9ZRQ3TXk6LtZFXm8e4D1xX7PYTZckJiDq6srDwriytC670",
	"QPWQlIOkNSPtPqKM6vJaEzwg4NfSwcSQKkcBE/IQHlClbea5VTAu84Cg3gQp3PXzRNE8HWxgV0KjYJkl",
	"rW78ebJ3pUmHNDzG5YvJNbvyBeNSlC49v2gumWQSCpTFDXk61FeDLYHrPkTJRq9FFbOtllF7JdxmehfY",
	"bc5BmQX2NQni3HoOXqwEhsUZXN0hqRmeY45RFEgSBnBt+s1TIx7fm6SBJ41LKn8hhz75hK6sPmNXFmLc",
	"NL1LXSUkWF/eal5u1t0X9e3KjTJLxdTa6zP2HJ2eo8zpuo719d7Y1ROZrRSEDlL4r9Xi1wIw94bXBrRK",
	"lNK6hNshE5CiFyM0xAL1GVsd1ipoWCSXAfQ6pbEuQ8/TOabr6jRbwGDxFi/ir+7MDQ7XcdYqBi8Nv65e",
	"7pSvzv1indK5KpQUom5pXeHM1ZR35h6EU0WLlP6Nmesz5v7B8mFVlxS0T4dNiCX1OLrTOZ+jbPasS6P8",
	"PpLinJCJEk1/qOPUIotczztBZ0wUvaC41vFnZoqkHuQuQr68czp/V8l1mmstVXL36Qvf6GmtoDoaIqvJ",
	"W9WVNUPIn+DHyorkKvAWOLZJ+d89tcsq2xuv9C1J3uzG3il9PzUbGoAsSbwe6feiYG7MqPmNNH2zvTwx",
	"UZGZjWzNL3IverfMjMuG5S66PdomVQvHPPnWOOyV0/HBBSJ3PeqhZeIL2qMHEaRa/k5tciRUx//MhaLJ",
	"plVdkV0ndPoZKeUqYW9khUhLYhM5nn0mUDZMHRRAaXUihXE9qxTCHBe/y639iAw9U6L18NzcXGXYzFXg",
	"v10M8sT/UiUhCRUtFAVToRhXIpace8tvr8c7YTL1i8DJ8PlZByORKYH818eOqYLMO/8mermq6GXFJd+O",
	"FqpZYVSiYT7oqk4xaxQNhUr8/mhGk8TX8B71ABCvMS0e5RQFp+XKq+SQGaMXZHej4npWJCLPAyH6URBM",
	"6l+Dba1g+vQa03eeL+d5TaAVWP5EE/LzOf6e18jKDsJLuF5j9u0yfeNO/dP2P/OApcmHkjlWO25pHtH1",
	"0771ObuFiIg/rfA1btY35P0XYNxpwYtXL/o7tt9zXbvV2ga7t+Ps2C3Xfem3+k3P7fkVeGSsVIVJHti7",
	"7r4pIOkf2K+7dy+n9kb+uTW1k2sEyaumO72cdvcrUCgy68f46pT+8I6CAvUZ9wD5ORECfwCak6uze+Uy",
	"uq/nSmrFSoPiqkN5iq+PA5FVZ/cYCwDTBY5g/kLud7MYm8USDZgWKi+3jrkK2Ud0CYvFMGUm0V2sZNPr",
	"k8Yipnf1iUDY8yA0n6/5J6la/VmgVcbPfTtoZZNqJDR54+s41eLYRUJu01cXBWTfw+pNFljVYsxC9zos",
	"rPutBeKezpT+M81UouOH+ns3fy6Pqc1WGCVVSCieIb6UVMGab+Nl7smGKyal7u2FJYVg1u5lN2MkgwQ6",
	"HIJ3k0n8CCQnnrgHBUPORiCHoO+96skqqPhLvNQ/mooJvVICpjfFl2fq0q6FqrNyYnXSaZdUnc07aAO1",
	"HqPBJH/VPTOCxaWL7loK4X48bJFvlnhia3lntQeqmssg/TbL5krx/1439yB1cxltv8DCuSrgnqByrpIu",
	"//DSuVQ1rlQ7l3xQY+zUnbq7VUmj8nq5tEjOjL5nkVy6Wlwll2KysExuEYwPVidXJGpFodwCSP7eSrlV",
	"L2fo2wxfZeYeZR7I41ehtUehVk45p6esBi3vFD1GwGF5pOFLqkJrOa9WGZb7pPNjs8msS5yE3nLm8qFO",
	"sJ//qa97hume+vNgK4TwiMi0LRalXn95LC/dO0W/o9SdfwzRKr0ht2J66ytTplVSErsGKxwkk56a5VMX",
	"YISlN1S+G9ZfJiVeFGBetMNLzpqKDX5NoHhEC5q/J/jdeH5XetUBvjkhuYt5f6X8Lk6OUV61IkwyumVC",
	"8I0U0s5w6wLdM0/PNSJZCwnrPJoT9127fNcuy4INMVvO4rvud1ZL6DDOMfwKaZL7f1qzOxO7Ti6BX3an",
	"WRh7ToclYivy/9GO/vKQcii87O5PjFaalZqn5ZK5ZmqatQ+TfCxrfp18/ezaS83mf+fhz0nSqrN7Q/Bu",
	"ku/ImuxR+u1Rwz2Hv6TJkWzBQvZl2p3+fwAAAP//NK2TfFZqAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
