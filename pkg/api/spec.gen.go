// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Ofw1OR1JB8wdHky70/8PAAD//xj6NjzvaAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
