// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"aqTn8Jc0pZItWMg4TLvT/w8AAP//DpDhIqlrAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
