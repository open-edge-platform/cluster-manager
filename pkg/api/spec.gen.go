// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"bY5D+hVpAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
