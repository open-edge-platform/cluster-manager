// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
