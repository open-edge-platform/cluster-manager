// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/H8AAAD//7asqJQBawAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
