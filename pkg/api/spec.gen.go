// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"OpP/DwAA//8619pdNmsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
