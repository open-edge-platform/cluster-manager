// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"pRiwcuIwvhj/fwAAAP//L7SQ4UBrAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
