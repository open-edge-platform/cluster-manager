// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xdfVfbOLP/KrrePafQjRPHBNpyD4fLAi152gUupNu7D8nDUexJosWRvJIcyLL57vdI",
	"8mvivPC6bNt/Smy9zYxGMz+NRu6t5bFhyChQKaztWyvEHA9BAtdPe54kIzjl7HfwZNM/AuwDVwVwg4dh",
	"ANa2tbW5ibfevnPthvvWsRvexhv73Ztu3d6o17fq2HO6796BVbEItbatgWlfsSgeqram+9B0T3yrYnH4",
	"IyIcfGtb8ggqlvAGMMRqxB7jQyytbSuKdE05DlUXQnJC+9ZkMlGNRcioAE16w3Hsn7F/Bn9EIKR64zEq",
	"geqfOAwD4mFJGK39LhhV77KhfuTQs7atH2qZaGqmVNROOesGMDwAiUkgzLg+CI+TUPVmbVsnXcUNIhSF",
	"eBww7CMiEGUShZyFwIMxUqxEAZbgI8Z1EQfzKBmSA0BDkAPmV61JxWo4dfszxZEcME7+VIJ5Nkb2IjkA",
	"KuPuEaFmCvRvgYZECEL7igNCRzggCb0N+5jJ9yyiz0nrMUMcBIu4B4q4nhoeYaml+fmsGZP2zt5ntBcQ",
	"7zn1IdZA5LEo8PVsd0HpggdCgK/0RBHpRZwDlUhILAGxnn6ZsKTJ33Qcu0klcIqDc+Aj4IecM/6MnLQG",
	"mvAR8YErKcc0B2MUUdwNQKnvAFNf/dLUG8b9SJdgpUKGfASacs1UXalLUxmTIVD5rAreyohUSzEEnmq3",
	"miaSEVW1VOu4ZzXwfhAJCdx03qQ9pm2nXuCSGAOkmOAsOA0whTPA/ngZwR+AAifeucQyEko4hPY4FpJH",
	"noz4Pfu4irrAKUgQvwIXxAhwynZWrAB3IRC5IqaNmC4iPfDGXgCnAyzgzuMbS18yJGU+HAEO5ODufTLf",
	"iJhIGIplzY+ZD3qGJqnTwJzjsXpOtDnu+66ESBiGynCXMJgNlokyVprv6vL86vK/EaaSyHEBu9Qr1hDf",
	"kGE0tLbrjlOxhoSaJyedPWWy+sAfrCwL9OFTKs2iRmRSxr5PlGXCwWmhRol5xlKZWAUxtA3WfaARDiIQ",
	"VaRHQlcwTuoJhDkg7b01/sAChZjLzP8YC26MugJuQ3zzCWhfzcLWRsWKu7G2rf/8+Nd/LrD95579b8d+",
	"18l+Vu3O61zBj7PQbdosG3loyq5gXNPEoxATLpAcYIkoGKTkMY1ItNeRMhTbtVqmvlXCaj7zRM1j1INQ",
	"ihobAR8RuK5dM35FaN++JnJgm9kQNSPs2g9iTCW+sTH1bW+AOfYkcFuAtCqZ3txaPhVVEXWrPhtiQmtX",
	"MLZda9vSpNpuVfVc9ZkUVsVSZfW0rG7NKsIkU4XzELx/gCJUv2vCk2hCZv+eRrp3d5xaIUscZ97zLaVV",
	"0bN2Yce/Xiev1nfX2u3qwgrrr0v4mOS3iRcxU5359vU8Gg4xH8+uK0jw8+zyodGwC1ypv2c6iTVOqSKh",
	"Br8arK7WQro3JVRuuFaZ8yD0lLM+ByHuNWDIWR+EiLcHa9oVKfdMaL/mQwCS0P76iqTwBBncjQrdbMUh",
	"JJM4iMU/h2FdpWTAFUeI6BVl1/Rewozb3mH+plSuyF4i0UqsUIXJzihdoKGteDWVI8PEJkztePEw3Sem",
	"qzFnmqwuFhAQCkVbvWlgTvJYL6zXJ1isFWuUAckiBzHzKfUorplsic2sKB5fjf6v+lv1368K/I2car3q",
	"zHqiudyN1py/Lur2u0677b9eb7erC5/XbB9G67sr2B81PRmbZdN8AD0cBfKxprmKjnXMyNCArgdAkQCp",
	"bICu55vhKmoji0eYBHpzTij6cNhCtVG9lnSkF9uDNeZermiuVrSmtKGKmj3FnXLuMAzluBLjGakASaIy",
	"1yQIUBdQJAx4iUVQXUljih7rbmqyXD8WKUZxkzAjiz3UNxW0qYoEMi0VV0XdIdQnHpbGmy3y6WakZlp9",
	"UrGGIATuQ9nog2iIqa2sm9agmIi4wRQIrDtuYw5QsS+VUtS2/3tn93/+64dKO3KcDU//C6/X1lHnpx9j",
	"G3pCg3ES+Z3RGEmGICQehmWUfqbkpoI+t/ZRWs2sC6UrMd3XWKAAC4miUIPcguWPCJVbjfl0FF1BsUp+",
	"thNpVnJzkqe9TAs+Rl1QEJb0yy0D8Uu3xFdpsxXjD8cgFeI9w7QPJftNj/j854B5V6WaGBChbfF+8+AM",
	"dXU1ZVL0lsG8pEzq+JmSawowcwqxtrt9oezBbb2yMWm3q+u3G5PsRS0pVovL7ZifGxeO7XbWSy1IEZJO",
	"LbocLx3FeRIDmiPbIrNHTMhcONkvGJEBE9Kub0LPd12vjC7OgvIQhlgpbpCs0B6bM4kJKl+Jlc+fmweJ",
	"+1CUFw3iFmw1XNfbsLfcTbA3nTfY7npvsd313Y0NB5w38AYWsRhbWTULQaB6ptFQSd88xRGtMMDapSjV",
	"A64WQLrodP1l9tOcC6kRy9bOVJR3RihzrZuB8NlyXWH9TBvPUuwZG5t09Vdzcjlv7bU+n182jw+a+3ut",
	"5snx5efj89PD/eb75uGBVSkpPzw7OzkrLWkeX56enXw4Ozw/Ly8/+HRYJuyldjangGVBShOA0NunIlf7",
	"J8cHzZipj8cnX44zsrKis8O9g9/KCo5PWnPLTs9Ofm2eN0+Om8cfyjv95eRXVbZctzT/Yk5Ys+BhVtCH",
	"xXgu3nrYy6M3zxFK2QsCdi0UPlKbIYZECB7pjRFODftMhIUpQIWlxN7AhFlwsp1CHgcdJromcjAFTVsD",
	"EEkXLyE+Y0yUDTcSqEGclg9DZlUeO3QTyyZ2ssvM/FTtrL3x6JE5iiqEq28tHJI0LF8wr9W4cfXGvnqr",
	"JTqqd0HiuqKdUN/ats4+Hrr7uTOGVrZnHILEPpY424VkWwHlt2Jvg/tA5X4KONQMBiANiZLjPd4XyhzY",
	"tmQhC1h/bA8xxX3gdsgC4o13uiCkDb0e42qSbNsLo+kqynoST5dyEMBH4KtqYqeu3w3xjR0yX+y4m45+",
	"IQNheyQcqKmPiASx0/p0fnm4f3B0eHl2vnf5pdk6utw7PL+su28vP+z/cnl+tOdublWyWof7B0m9/aO9",
	"/aM917k8Pfn0W33D2azM6czd3Eo623jbKKu1qKvciLOdWR190qjPdzNZe5SoGccB8bTmEqEA+X4hcyNb",
	"Ufn3F5YXsMiPZz5QDnhSsUB6Gix0sXcVhek4qqQ4lUXZXtxVHgtZraw+VXMaz6k9I/y4sKN5V3LaC4k5",
	"Qi/R3h5gGXGw+2qHuXPKuHzP+DXm/hfoCuZdgRQ7ynV+tfpnRJRpzC9mieZFZW3TKAjimufKP0RBaY38",
	"Tt8a1asbTnXrJ34FLq+X+9S8VUsO3EylPNxUPeRwlaIC+xrdqILOMm9YcLkN593WdIRjprk+W51Pj9od",
	"5gGwr/TERAJVQRlBpSetTxTK2t2219Z2t3Pv/lL/JNtzvdlKfuvqqoeV66+/Xl/f1Y1+WsuX/GQ6KrzS",
	"dcvPJspPPv62WOXLiiqW6UtnCST9REzeWzh1VFgai1yEVcrCl7kzoPxYKx0szXQ0fbjEJA4OTe7NnNMD",
	"j0VUo1Y9YBIxBioJB41oK4hDH3M/ACFUvRD3CU3DE6sE/GdkG8u9XKyjYmEqh5wauU7j7VJDMxPVWAFn",
	"lofVqamACoCyggj1gsgntI9C5iNMfaTABvEgH9mZjTAq1LX0wLAQX4phDPHgrg1LjshVX17EiRwrbzM0",
	"XR61WqcaxQDmwN8nc/qvLy0rTtbSUFaXZnOsdiDm0J3Euj+tXkQgn3mRUj/kQ49QECaOqMlNj9QTQcf+",
	"EblVB50dnrfQ3mmzqoN+UkdZSupZebfoVuvVurILSmQsBIpDhfY2qk51w9K2ZqDZrQ1BcuLp330DvIuU",
	"fwApSilLqEIhZ0OQA9BRXN2ZIjTNfGv6ppdf4oGmUmpdx7lTdl5Jiu5UquzHOLFxnoKkw9fmZT/mVcPa",
	"vlA2ERskl0hLA+rayE22XEvkh4MgPTV8lU96LZXUr27uGDCfO31RZrXibKPc+aQxX5IhDjLitBieyxO9",
	"G+I+nJM/Ycd1knTqPyLg4yybOqlh5dOmU4ziOnfJdppUpulvUh9uklBij3AhNfE52lFT6hOnYMiERDi4",
	"xmNhDmQIVVbo94h60hzWxFGDVwnJr5DmZTX225HjuFus1xMgd+rzpGHKy2VxZ+bV5DHuA9cZz73E2XAC",
	"ooraFhZe29K2tK0bqocknSbNuWn2EGVUpyeb4AsBv5I2JkZU1TZt0/MoDBmX4KMegcAX221qI8WW+juD",
	"A9TLYmqaelPMw2vTTLImFCU8oMoLzK4CwbjMM4i6Yz24fh6ruUwbG5koY6Z4nJ4yXfjzeKetpwRpPg0U",
	"j6dheuRzxmMDNj307KC5Qz5z0ENZXJCXb3U12hK6HiKUrPWdpGLUxTLuqESLTe2CGs8Ax2li35MgznnI",
	"0YvVQmTxybqukGjNsyndMAokCQO4NOPPSjmmqztOA41aRqm9CDn0yA1qWz3G2hZi3BR9TKlDgvXktV57",
	"9ar7pro5VwHMUPEs7PQYe41OznJ8Xsb+eWfk6o6MighC+yn9l2rwSwGYe4NLQ9pcltI8lOsBE5CyFzM0",
	"wAL1GFud1nnUsEguI+h9KmN97SAv51iuq8tsgeLGU7xIbzsPhBel4fbV09vy2dgvdhMyk3WUUtQpzSMt",
	"w1eNVfDV1HWpx4BlCRBLEVJnMoORynrPqtTK758pzQmZKPEg+/pcQmQnFbOg7ZSJImqLc1t/ZiYp7lHu",
	"nuTTeSezd9Ncp/4UQPoFTfQU5K6JLAdzVehtmpA/wY+NFcllXC4A4km65wOtyyrTG4/0La286Ym9VfZ+",
	"YiY0AFly0H6g34uCuzGtZifS1M3m8thEwaYmsjE7yIPk3TA9LmuWu9j4ZJO0eF9fFN8dNqflcnz0BZG7",
	"DvfYa+IFzdGjLKRK/g51soUNsRxkEIomkzbvSvRdQuX3SCGYt9hrWeLZCrGouPErgbJmagMCyqoTKQz0",
	"nGcQZrT4Y27sJ1ToqZS8x9fm+irNpq5+/+3LIC/8l7oSktDWwqVgMlLjzNOS/XT51wrimTCZGYvIyfj5",
	"WQefkUl5/deXlsl6zYN/E61edellyUTfjhWqWGFUYmE+6yxeMe0UjYRKcH80ZUnia5dPugGIx5gUt3JK",
	"gpNy41WyyYzZC7K7cHH+MhKR54EQvSgIxtWvwbfOUfr02tp3nS/XeS2gFVT+WAvy/hr/wGuDZRvhJVqv",
	"Oft2lb52q/40/XtusLT4UNLHatstrSM6X9637jNbiIj4Uxpf42R9Q+i/QONWA968e9Pbsv2u69qNxibY",
	"3S1ny2647lu/0at7btefw0emSvM4yRN729k1CUO9Pft95/btxF7LPzcmdnJtJHlVdycXk87uHBaKyvol",
	"viqnP7SkqEA9xj1Afm4Jgd8HrcnzTyPL1+iu7ivJDSwNiqsK5UeSPRyILBu/y1gAmC4AgvkL2N/dYuwW",
	"Syxgmpi+3DvmMqKfEBIWk5/KXKK72Mim12WNR0y/zUAEwp4Hoflc0T/J1OrPQK3SfuZbUSu7VLNCkze+",
	"jlMtjl0k4jZ1dRJD9v2z7niBVy3GLHSt/cK431og7vlc6T/TTSU2fqC/b/TnA/K74h7iS2hzVPMoHuYf",
	"nd1lmED7A/CushWfXmxfftCUVi0keZVLrJV2uyTJaxZf9NV4jAbj/M38zIYXhy6ijZTC3bjZImiRAIk7",
	"gYvKIyWpZZR+m1lqpfx/1Wlqz5dOlsn2BeaTzSPuGRLK5srlRWSU3T/zKzWNK6V+Jd//GDlVp+puzJVR",
	"ebpXmuNlWj8wxysdLU7ySjlZmOW1iMZHS/MqCnVOntcCSv7eRK9V75Loyxdf5cEzyhDI0ydRNYehNk45",
	"0FOWQpUHRU+xX16+UX5JSVQN590qzXJfoH5qNZmGxEnkKOcuH2sDdv8vkz0wyvTcXzNbIQJFRGZtsShF",
	"/eWhqHTulPwOUjj/FEur9ELfiqczX5kxnbdKYmiwwkYyqalVPoUAQyy9gcJuWH9IlXhRgHnRDy/Zayo1",
	"+DWh4gk9aP5a43fn+d3ozY9PzSyS21j3VzqexMk2yptvCJMDybJF8ELzQF+e41+URVoyCXcIfy2cDefJ",
	"kN93k/TdJC2LUMRqOc3vXb8lWyKHUU7hVzgaePjnQztTUe/kovtFZ5IFwGcMX7JsRf4/E9JfV1IoxMvu",
	"u8RspScxs7Jc0tdUHq8GPskHwWbHyeeM3nmo6TPPWfpzK2nV3r0BeFfJt3LNiUn6fVWjPfu/pEcq2YCF",
	"E4dJZ/L/AQAA//8ruf2SOmsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
