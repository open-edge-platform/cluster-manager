{
  "name": "baseline",
  "version": "v2.0.7",
  "kubernetesVersion": "v1.30.10+rke2r1",
  "description": "Baseline Cluster Template",
  "controlplaneprovidertype": "rke2",
  "infraprovidertype": "intel",
  "clusterconfiguration": {
    "kind": "RKE2ControlPlaneTemplate",
    "apiVersion": "controlplane.cluster.x-k8s.io/v1beta1",
    "metadata": {
      "labels": {
        "cpumanager": "true"
      }
    },
    "spec": {
      "template": {
        "spec": {
          "files": [
            {
              "path": "/var/lib/rancher/rke2/agent/etc/containerd/config.toml.tmpl",
              "content": "version = 2\n\n[plugins.\\\"io.containerd.internal.v1.opt\\\"]\n  path = \\\"/var/lib/rancher/rke2/agent/containerd\\\"\n\n[plugins.\\\"io.containerd.grpc.v1.cri\\\"]\n  stream_server_address = \\\"127.0.0.1\\\"\n  stream_server_port = \\\"10010\\\"\n  enable_selinux = false\n  enable_unprivileged_ports = true\n  enable_unprivileged_icmp = true\n  sandbox_image = \\\"index.docker.io/rancher/mirrored-pause:3.6\\\"\n  disable_apparmor = true\n\n[plugins.\\\"io.containerd.grpc.v1.cri\\\".containerd]\n  snapshotter = \\\"overlayfs\\\"\n  disable_snapshot_annotations = true\n\n[plugins.\\\"io.containerd.grpc.v1.cri\\\".containerd.runtimes.runc]\n  runtime_type = \\\"io.containerd.runc.v2\\\"\n\n[plugins.\\\"io.containerd.grpc.v1.cri\\\".containerd.runtimes.runc.options]\n  SystemdCgroup = true\n\n[plugins.\\\"io.containerd.grpc.v1.cri\\\".registry]\n  config_path = \\\"/var/lib/rancher/rke2/agent/etc/containerd/certs.d\\\"\n\n[plugins.\\\"io.containerd.grpc.v1.cri\\\".containerd.runtimes.kata-qemu]\n  runtime_type = \\\"io.containerd.kata-qemu.v2\\\"\n  runtime_path = \\\"/opt/kata/bin/containerd-shim-kata-v2\\\"\n  privileged_without_host_devices = true\n  pod_annotations = [\\\"io.katacontainers.*\\\"]\n\n[plugins.\\\"io.containerd.grpc.v1.cri\\\".containerd.runtimes.kata-qemu.options]\n  ConfigPath = \\\"/opt/kata/share/defaults/kata-containers/configuration-qemu.toml\\\""
            },
            {
              "path": "/var/lib/rancher/rke2/server/manifests/local-path-provisioner.yaml",
              "content": "# SPDX-FileCopyrightText: (C) 2025 Intel Corporation\\n# SPDX-License-Identifier: Apache-2.0\\n---\\napiVersion: v1\\nkind: ServiceAccount\\nmetadata:\\n  name: local-path-provisioner-service-account\\n  namespace: kube-system\\n\\n---\\napiVersion: rbac.authorization.k8s.io/v1\\nkind: Role\\nmetadata:\\n  name: local-path-provisioner-role\\n  namespace: kube-system\\nrules:\\n  - apiGroups: [\\\"\\\"]\\n    resources: [\\\"pods\\\"]\\n    verbs: [\\\"get\\\", \\\"list\\\", \\\"watch\\\", \\\"create\\\", \\\"patch\\\", \\\"update\\\", \\\"delete\\\"]\\n\\n---\\napiVersion: rbac.authorization.k8s.io/v1\\nkind: ClusterRole\\nmetadata:\\n  name: local-path-provisioner-role\\nrules:\\n  - apiGroups: [\\\"\\\"]\\n    resources: [\\\"nodes\\\", \\\"persistentvolumeclaims\\\", \\\"configmaps\\\", \\\"pods\\\", \\\"pods/log\\\"]\\n    verbs: [\\\"get\\\", \\\"list\\\", \\\"watch\\\"]\\n  - apiGroups: [\\\"\\\"]\\n    resources: [\\\"persistentvolumes\\\"]\\n    verbs: [\\\"get\\\", \\\"list\\\", \\\"watch\\\", \\\"create\\\", \\\"patch\\\", \\\"update\\\", \\\"delete\\\"]\\n  - apiGroups: [\\\"\\\"]\\n    resources: [\\\"events\\\"]\\n    verbs: [\\\"create\\\", \\\"patch\\\"]\\n  - apiGroups: [\\\"storage.k8s.io\\\"]\\n    resources: [\\\"storageclasses\\\"]\\n    verbs: [\\\"get\\\", \\\"list\\\", \\\"watch\\\"]\\n\\n---\\napiVersion: rbac.authorization.k8s.io/v1\\nkind: RoleBinding\\nmetadata:\\n  name: local-path-provisioner-bind\\n  namespace: kube-system\\nroleRef:\\n  apiGroup: rbac.authorization.k8s.io\\n  kind: Role\\n  name: local-path-provisioner-role\\nsubjects:\\n  - kind: ServiceAccount\\n    name: local-path-provisioner-service-account\\n    namespace: kube-system\\n\\n---\\napiVersion: rbac.authorization.k8s.io/v1\\nkind: ClusterRoleBinding\\nmetadata:\\n  name: local-path-provisioner-bind\\nroleRef:\\n  apiGroup: rbac.authorization.k8s.io\\n  kind: ClusterRole\\n  name: local-path-provisioner-role\\nsubjects:\\n  - kind: ServiceAccount\\n    name: local-path-provisioner-service-account\\n    namespace: kube-system\\n\\n---\\napiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: local-path-provisioner\\n  namespace: kube-system\\nspec:\\n  replicas: 1\\n  selector:\\n    matchLabels:\\n      app: local-path-provisioner\\n  template:\\n    metadata:\\n      labels:\\n        app: local-path-provisioner\\n    spec:\\n      serviceAccountName: local-path-provisioner-service-account\\n      containers:\\n        - name: local-path-provisioner\\n          image: rancher/local-path-provisioner:v0.0.31\\n          imagePullPolicy: IfNotPresent\\n          command:\\n            - local-path-provisioner\\n            - --debug\\n            - start\\n            - --config\\n            - /etc/config/config.json\\n          volumeMounts:\\n            - name: config-volume\\n              mountPath: /etc/config/\\n          env:\\n            - name: POD_NAMESPACE\\n              valueFrom:\\n                fieldRef:\\n                  fieldPath: metadata.namespace\\n            - name: CONFIG_MOUNT_PATH\\n              value: /etc/config/\\n      volumes:\\n        - name: config-volume\\n          configMap:\\n            name: local-path-config\\n\\n---\\napiVersion: storage.k8s.io/v1\\nkind: StorageClass\\nmetadata:\\n  name: local-path\\n  annotations:\\n    storageclass.kubernetes.io/is-default-class: \\\"true\\\"\\n    defaultVolumeType: \\\"local\\\"\\nprovisioner: rancher.io/local-path\\nvolumeBindingMode: WaitForFirstConsumer\\nreclaimPolicy: Delete\\n\\n---\\nkind: ConfigMap\\napiVersion: v1\\nmetadata:\\n  name: local-path-config\\n  namespace: kube-system\\ndata:\\n  config.json: |-\\n    {\\n            \\\"nodePathMap\\\":[\\n            {\\n                    \\\"node\\\":\\\"DEFAULT_PATH_FOR_NON_LISTED_NODES\\\",\\n                    \\\"paths\\\":[\\\"/opt/local-path-provisioner\\\"]\\n            }\\n            ]\\n    }\\n  setup: |-\\n    #!/bin/sh\\n    set -eu\\n    mkdir -m 0777 -p \\\"\\$VOL_DIR\\\"\\n  teardown: |-\\n    #!/bin/sh\\n    set -eu\\n    rm -rf \\\"\\$VOL_DIR\\\"\\n  helperPod.yaml: |-\\n    apiVersion: v1\\n    kind: Pod\\n    metadata:\\n      name: helper-pod\\n    spec:\\n      priorityClassName: system-node-critical\\n      tolerations:\\n        - key: node.kubernetes.io/disk-pressure\\n          operator: Exists\\n          effect: NoSchedule\\n      containers:\\n      - name: helper-pod\\n        image: busybox\\n        imagePullPolicy: IfNotPresent"
            }
          ],
          "agentConfig": {
            "kubelet": {
              "extraArgs": [
                "--topology-manager-policy=best-effort",
                "--cpu-manager-policy=static",
                "--reserved-cpus=1",
                "--max-pods=250",
                "--tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"
              ]
            }
          },
          "preRKE2Commands": [
            "mkdir -p /etc/systemd/system/rke2-server.service.d",
            "echo '[Service]\nEnvironmentFile=/etc/environment' > /etc/systemd/system/rke2-server.service.d/override.conf"
          ],
          "privateRegistriesConfig": {},
          "serverConfig": {
            "cni": "calico",
            "cniMultusEnable": true,
            "disableComponents": {
              "kubernetesComponents": [
                "cloudController"
              ],
              "pluginComponents": [
                "rke2-ingress-nginx"
              ]
            },
            "kubeApiServer": {
              "extraArgs": [
                "--feature-gates=PortForwardWebsockets=true",
                "--tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"
              ]
            },
            "kubeControllerManager": {
              "extraArgs": null
            },
            "kubeScheduler": {
              "extraArgs": null
            },
            "etcd": {
              "exposeMetrics": false,
              "backupConfig": {
                "retention": "5",
                "scheduleCron": "0 */5 * * *"
              },
              "customConfig": {
                "extraArgs": [
                  "cipher-suites=[TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384]"
                ]
              }
            }
          },
          "nodeDrainTimeout": "2m",
          "rolloutStrategy": {
            "type": "RollingUpdate",
            "rollingUpdate": {
              "maxSurge": 1
            }
          }
        }
      }
    }
  },
  "clusterNetwork": {
    "pods": {
      "cidrBlocks": [
        "10.42.0.0/16"
      ]
    },
    "services": {
      "cidrBlocks": [
        "10.43.0.0/16"
      ]
    }
  },
  "cluster-labels": {
    "default-extension": "baseline"
  }
}
